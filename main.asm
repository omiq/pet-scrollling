 processor 6502
	org $401
	; Starting new memory block at $401
StartBlock401
	.byte $b ; lo byte of next line
	.byte $4 ; hi byte of next line
	.byte $0a, $00 ; line 10 (lo, hi)
	.byte $9e, $20 ; SYS token and a space
	.byte   $31,$30,$34,$30
	.byte $00, $00, $00 ; end of program
	; Ending memory block
EndBlock401
	org $410
	; Starting new memory block at $410
StartBlock410
PET40
	; LineNumber: 138
	jmp block1
	; LineNumber: 5
txt_temp_address_p	= $68
	; LineNumber: 6
txt_ytab	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w 0
	; LineNumber: 11
txt_screen_memory	= $6A
	; LineNumber: 12
txt_max_digits	dc.w	0
	; LineNumber: 12
txt_next_digit	dc.w	0
	; LineNumber: 13
txt_temp_num_p	= $6C
	; LineNumber: 14
txt_temp_num	dc.w	0
	; LineNumber: 15
txt_temp_i	dc.b	$00
	; LineNumber: 4
Interrupts_interruptFlag = $e813
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 12
i	dc.b	0
	; LineNumber: 12
a	dc.b	0
	; LineNumber: 12
ALIVE	dc.b	0
	; LineNumber: 12
WON_GAME	dc.b	0
	; LineNumber: 13
x	dc.b	0
	; LineNumber: 13
y	dc.b	0
	; LineNumber: 13
old_x	dc.b	0
	; LineNumber: 13
old_y	dc.b	0
	; LineNumber: 14
sx	dc.w	0
	; LineNumber: 14
sy	dc.w	0
	; LineNumber: 17
des	= $6E
	; LineNumber: 17
map_p	= $70
	; LineNumber: 18
n_key_up	dc.w	0
	; LineNumber: 18
n_key_down	dc.w	0
	; LineNumber: 18
n_key_left	dc.w	0
	; LineNumber: 18
n_key_right	dc.w	0
	; LineNumber: 18
key_up	dc.w	0
	; LineNumber: 18
key_down	dc.w	0
	; LineNumber: 18
key_left	dc.w	0
	; LineNumber: 18
key_right	dc.w	0
	; LineNumber: 19
irq_ad = $90
	; LineNumber: 20
org_ad	dc.w	0
	; LineNumber: 21
new_ad	= $72
	; LineNumber: 22
sdes	= $74
	; LineNumber: 23
ship	
	dc.b	124, 251, 236, 98, 123, 32, 251, 236, 252
	dc.b	255, 124, 226, 226, 32, 32, 0
	; LineNumber: 29
map	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $062, $07b, $0fb, $0a0, $0a0, $0e2, $0e2
	dc.b $07e, $020, $06c, $06c, $020, $0e2, $0ec, $07e
	dc.b $062, $0a0, $07e, $06c, $07f, $07f, $07e, $07e
	dc.b $07e, $0a0, $061, $020, $0ec, $0ec, $0ec, $0ff
	dc.b $07b, $0fb, $0ec, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0e2, $07e
	dc.b $020, $020, $020, $020, $0a0, $0fc, $07e, $0fe
	dc.b $0e1, $0a0, $0ff, $06c, $061, $020, $062, $07b
	dc.b $06c, $020, $020, $020, $020, $0a0, $0fc, $07e
	dc.b $0fe, $0e1, $0a0, $0ff, $06c, $061, $020, $062
	dc.b $07b, $06c, $020, $0e1, $0a0, $0ff, $06c, $061
	dc.b $0a0, $0fc, $07e, $0fe, $020, $06c, $062, $020
	dc.b $07b, $020, $020, $020, $020, $062, $0ec, $07e
	dc.b $020, $020, $020, $0fe, $07e, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e2, $0e2, $0e2, $020
	dc.b $07c, $0e2, $0fb, $0e1, $0e2, $020, $06c, $0a0
	dc.b $0ec, $06c, $07f, $07f, $07f, $07e, $06c, $0fe
	dc.b $0a0, $07e, $020, $06c, $07f, $07f, $07e, $06c
	dc.b $0a0, $0ec, $020, $07c, $0ff, $0ff, $07b, $020
	dc.b $07b, $0a0, $0ec, $0fe, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $07e
	dc.b $020, $0fb, $0a0, $0ec, $020, $07c, $0e2, $07e
	dc.b $07c, $07e, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $07e, $020, $0fb, $0a0, $0ec, $020, $07c, $0e2
	dc.b $07e, $07c, $07e, $020, $0fb, $0a0, $0ec, $020
	dc.b $07c, $0a0, $0a0, $07e, $020, $0e2, $0e2, $020
	dc.b $0e2, $020, $020, $020, $0fe, $07e, $020, $020
	dc.b $020, $062, $0fe, $07f, $0ff, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $0e2
	dc.b $0e2, $0e2, $0fb, $020, $062, $0a0, $0a0, $07e
	dc.b $06c, $07f, $07f, $07e, $020, $062, $0a0, $0ec
	dc.b $07e, $06c, $07f, $07f, $07f, $07e, $06c, $0a0
	dc.b $0e2, $020, $07b, $0ff, $0ff, $0ff, $020, $0fe
	dc.b $061, $0fb, $0ec, $0fe, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $061
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0a0
	dc.b $061, $0e1, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0e1, $0a0, $020
	dc.b $061, $020, $020, $06c, $0a0, $0e2, $0fb, $06c
	dc.b $0fe, $0a0, $07e, $0fe, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fb
	dc.b $07b, $0e2, $07e, $06c, $0fc, $06c, $06c, $06c
	dc.b $07f, $07e, $020, $062, $0a0, $0a0, $0e2, $06c
	dc.b $07f, $07f, $0fc, $0a0, $062, $0fe, $0ec, $020
	dc.b $020, $0ff, $0ff, $0fe, $07c, $06c, $0fe, $0e2
	dc.b $020, $07f, $0fc, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $020
	dc.b $0fe, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fc
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0e1, $07b, $06c
	dc.b $061, $020, $020, $0fe, $0ec, $07b, $0e1, $0a0
	dc.b $0ec, $020, $0fe, $0a0, $0e2, $06c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0e2, $0e2, $0e2, $07e, $07e, $07e, $07e
	dc.b $062, $062, $0a0, $0ec, $07e, $020, $07c, $07e
	dc.b $07f, $07e, $0e2, $0e2, $0e2, $020, $06c, $0e2
	dc.b $0e2, $0ff, $0a0, $0a0, $0a0, $0e2, $07e, $062
	dc.b $061, $07f, $07e, $07f, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $0e2
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $0e2, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $0e2
	dc.b $020, $020, $020, $0a0, $061, $06c, $0a0, $0ec
	dc.b $06c, $06c, $0ec, $06c, $0fe, $0e2, $07e, $020
	dc.b $020, $06c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fb
	dc.b $0ec, $020, $020, $062, $0ec, $06c, $0fe, $061
	dc.b $07b, $0fe, $0a0, $0a0, $0fc, $07c, $07b, $0fe
	dc.b $0a0, $062, $062, $020, $07b, $062, $0fe, $062
	dc.b $07b, $07f, $07e, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0fb, $020, $0ec, $020, $020
	dc.b $0a0, $07b, $020, $0e2, $06c, $0fe, $0fe, $07b
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $020, $0fe, $061, $0ec, $06c, $0ec, $020, $061
	dc.b $0fc, $0ec, $06c, $0a0, $0e2, $0fb, $0fc, $0ec
	dc.b $06c, $0a0, $0e2, $0fb, $0fc, $0ec, $06c, $0a0
	dc.b $07e, $06c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0fe, $061, $020, $020
	dc.b $020, $0a0, $07b, $07c, $07e, $020, $06c, $07b
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $062, $062, $062, $0fe
	dc.b $06c, $0a0, $061, $06c, $0ec, $0ff, $020, $061
	dc.b $0e2, $06c, $0a0, $07f, $07e, $0e1, $0e2, $06c
	dc.b $0a0, $07f, $07e, $0e1, $0e2, $06c, $0a0, $07f
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0e2, $020, $020, $020
	dc.b $07c, $0fc, $07e, $0a0, $0a0, $0ec, $0fb, $0a0
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $07e
	dc.b $0e1, $07e, $020, $0fb, $0ec, $0ff, $020, $07e
	dc.b $020, $0fb, $0a0, $07f, $07e, $020, $020, $0fb
	dc.b $0a0, $07f, $07e, $020, $020, $0fb, $0a0, $07f
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07c, $020, $020, $020, $020
	dc.b $0fb, $0ec, $020, $0e1, $0a0, $020, $020, $0fb
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07c, $0e2, $07c, $020, $020
	dc.b $020, $07c, $0e2, $07e, $07e, $020, $020, $07c
	dc.b $0e2, $07e, $07e, $020, $020, $07c, $0e2, $07e
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07e
	dc.b $07e, $020, $020, $07c, $061, $06c, $0fc, $07c
	dc.b $061, $020, $07b, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0ec, $0ff, $020, $020
	dc.b $020, $0e1, $0a0, $0fb, $07e, $020, $020, $0e1
	dc.b $0a0, $0fb, $07e, $020, $020, $0e1, $0a0, $0fb
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0fe, $061, $0e1, $0fe, $07e
	dc.b $0fc, $0fe, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0e1, $07f, $0a0, $020, $0e2, $020
	dc.b $0ec, $0e2, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0e2, $07b
	dc.b $020, $020, $07c, $0a0, $07c, $0fc, $062, $0fe
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07f, $020, $0ff
	dc.b $06c, $020, $020, $0fb, $07b, $07c, $0fb, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $0a0, $020, $020, $020, $020, $062, $020, $0fb
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $062, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fc, $07b, $020, $0e1, $07e, $07f, $06c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $062, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $0a0, $0ec, $0a0, $0fc, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $062, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $07b, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0a0, $062, $020, $07f, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $0a0, $0fb, $0e2, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0fe, $0ec, $07f, $0fc, $020, $0e2, $0a0
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $0a0, $0fb, $0e2, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0fe, $0ec, $0fb, $07b, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0e1, $0ec, $06c, $062, $07b, $0fb
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0a0, $0a0, $07e, $0e1, $020, $07c
	dc.b $0fb, $0a0, $07b, $020, $020, $06c, $0fe, $0fe
	dc.b $0a0, $07f, $07f, $0fb, $0a0, $020, $020, $020
	dc.b $0fb, $061, $07e, $020, $020, $020, $0fe, $0fc
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0a0, $0a0, $07e, $0e1, $020, $07c
	dc.b $0fb, $0a0, $07b, $020, $020, $06c, $0fe, $0fe
	dc.b $0a0, $07f, $07f, $0fb, $0a0, $07f, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $07e, $020, $07c, $07b
	dc.b $0fc, $07b, $020, $020, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $0a0, $07b, $06c
	dc.b $07b, $020, $0e2, $0fc, $07c, $0fb, $0a0, $0fc
	dc.b $07f, $06c, $07f, $0a0, $0a0, $061, $07c, $07b
	dc.b $020, $07c, $0fc, $07b, $020, $0fe, $0a0, $07c
	dc.b $0fb, $0fc, $07b, $020, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $0a0, $07b, $06c
	dc.b $07b, $020, $0e2, $0fc, $07c, $0fb, $0a0, $0fc
	dc.b $07f, $06c, $07f, $0a0, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fe
	dc.b $0a0, $0fc, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0fe, $0e2, $0fb, $0fc, $020, $020
	dc.b $020, $020, $020, $020, $07f, $062, $0ff, $020
	dc.b $020, $0e2, $061, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0fc, $0a0, $0e1, $0a0, $0fc, $020
	dc.b $07f, $0fb, $07b, $07c, $0fb, $062, $07c, $0fb
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $07b, $0fb
	dc.b $0fc, $07b, $020, $020, $0e1, $0a0, $0a0, $07f
	dc.b $020, $0fb, $0a0, $0fc, $020, $020, $020, $0fe
	dc.b $0a0, $0a0, $0fc, $0a0, $0e1, $0a0, $0fc, $020
	dc.b $07f, $0fb, $07b, $07c, $0fb, $062, $07c, $0fb
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $07b, $06c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e1, $0a0
	dc.b $07f, $07c, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0a0, $020, $0e1, $0a0, $020, $020
	dc.b $020, $020, $020, $062, $062, $07b, $020, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0fc, $0a0, $061, $0a0, $0a0, $0fc, $020
	dc.b $07f, $07f, $0fb, $07f, $020, $07c, $0fb, $062
	dc.b $07c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fe
	dc.b $0a0, $0a0, $0fc, $07c, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $020, $0fb, $0a0, $0fb, $07b, $062, $0a0
	dc.b $0a0, $0fc, $0a0, $061, $0a0, $0a0, $0fc, $020
	dc.b $07f, $07f, $0fb, $07f, $020, $07c, $0fb, $062
	dc.b $07c, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $07e, $020, $0fe, $0ec, $06c, $07e, $07e, $0ff
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $062, $062, $062, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $062, $062, $062, $07b, $020, $020, $020
	dc.b $020, $06c, $062, $062, $062, $07b, $07c, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $0e1, $061, $020, $0a0, $07c, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $07f, $07f, $0fb, $0fb, $0fb, $062, $07c
	dc.b $0fc, $062, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0e1, $0fc, $0a0, $0a0, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $07f, $07f, $0fb, $0fb, $0fb, $062, $07c
	dc.b $0fc, $062, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0ec
	dc.b $020, $0fe, $0ec, $0fe, $07e, $020, $0ff, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $06c
	dc.b $0a0, $0fb, $0fe, $07f, $0e2, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $06c
	dc.b $0a0, $0fb, $0fe, $07f, $0e2, $07b, $020, $020
	dc.b $06c, $0a0, $0fb, $0fe, $07f, $0e2, $07b, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fe, $0e2, $0fb, $0fc
	dc.b $020, $020, $07c, $0fc, $062, $0ec, $07c, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $07f, $0fc, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $061, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $07f, $0fc, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0ec, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $07c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $061, $07e, $07e, $07e, $06c, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $061, $07e, $07e, $07e, $06c, $07e, $020, $020
	dc.b $07c, $061, $07e, $07e, $07e, $06c, $07e, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0a0, $020, $0e1, $0a0
	dc.b $020, $062, $062, $062, $020, $06c, $0a0, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $80     ;$59 used for hi-byte
initdiv16x8_dividend = $82	  ;$fc used for hi-byte
initdiv16x8_remainder = $84	  ;$fe used for hi-byte
initdiv16x8_result = $82 ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $80
mul16x8_num1 = $82
mul16x8_num2 = $84
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $80
div8x8_d = $82
div8x8_e = $84
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $80
multiplier_a = $82
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $82
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	;*
; //
; //	Output a string at the current cursor location.
; //	Set Carriage Return on/off	
; //	
; //	*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_text_colour
	;    Procedure type : User-defined procedure
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cls
	;    Procedure type : User-defined procedure
	; LineNumber: 254
txt_cls
	; LineNumber: 255
	; Assigning to register
	; Assigning register : _a
	lda #$93
	; LineNumber: 256
	jsr $ffd2
	; LineNumber: 257
	jsr txt_DefineScreen
	; LineNumber: 260
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_DefineScreen
	;    Procedure type : User-defined procedure
	; LineNumber: 266
	; LineNumber: 265
txt_y	dc.b	0
txt_DefineScreen_block4
txt_DefineScreen
	; LineNumber: 268
	; Binary clause INTEGER: NOTEQUALS
	; Load Integer array
	ldx #0 ; watch for bug, Integer array has max index of 128
	lda txt_ytab,x
	ldy txt_ytab+1,x
txt_DefineScreen_rightvarInteger_var10 = $88
	sta txt_DefineScreen_rightvarInteger_var10
	sty txt_DefineScreen_rightvarInteger_var10+1
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda txt_DefineScreen_rightvarInteger_var10+1   ; compare high bytes
	cmp #$00 ;keep
	beq txt_DefineScreen_pass111
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_pass111
	lda txt_DefineScreen_rightvarInteger_var10
	cmp #$00 ;keep
	beq txt_DefineScreen_elsedoneblock8
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_ConditionalTrueBlock6: ;Main true block ;keep 
	; LineNumber: 269
	; LineNumber: 270
	rts
	; LineNumber: 271
txt_DefineScreen_elsedoneblock8
	; LineNumber: 273
	lda #$00
	ldx #$80
	sta txt_temp_address_p
	stx txt_temp_address_p+1
	; LineNumber: 280
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_y
txt_DefineScreen_forloop13
	; LineNumber: 276
	; LineNumber: 277
	; integer assignment NodeVar
	ldy txt_temp_address_p+1 ; keep
	lda txt_temp_address_p
	; Calling storevariable on generic assign expression
	pha
	lda txt_y
	asl
	tax
	pla
	sta txt_ytab,x
	tya
	sta txt_ytab+1,x
	; LineNumber: 278
	lda txt_temp_address_p
	clc
	adc #$28
	sta txt_temp_address_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc txt_DefineScreen_WordAdd21
	inc txt_temp_address_p+1
txt_DefineScreen_WordAdd21
	; LineNumber: 279
txt_DefineScreen_forloopcounter15
txt_DefineScreen_loopstart16
	; Compare is onpage
	; Test Inc dec D
	inc txt_y
	lda #$18
	cmp txt_y ;keep
	bcs txt_DefineScreen_forloop13
txt_DefineScreen_loopdone22: ;keep
txt_DefineScreen_forloopend14
txt_DefineScreen_loopend17
	; LineNumber: 280
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_move_to
	;    Procedure type : User-defined procedure
	; LineNumber: 285
	; LineNumber: 284
txt_temp_p	= $76
	; LineNumber: 282
txt__text_x	dc.b	0
	; LineNumber: 282
txt__text_y	dc.b	0
txt_move_to_block23
txt_move_to
	; LineNumber: 286
	; Load Integer array
	lda txt__text_y
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	sta txt_temp_p
	sty txt_temp_p+1
	; LineNumber: 286
	; Poke
	; Optimization: shift is zero
	sta $c4
	; LineNumber: 287
	
; // LSB
	; Poke
	; Optimization: shift is zero
	lda txt_temp_p+1
	sta $c5
	; LineNumber: 289
	
; // MSB
	; Poke
	; Optimization: shift is zero
	lda txt__text_x
	sta $c6
	; LineNumber: 290
	jsr $e07f
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_ascii_to_petscii
	;    Procedure type : User-defined procedure
	; LineNumber: 295
	; LineNumber: 294
txt__ASCII_CH	dc.b	0
txt_ascii_to_petscii_block24
txt_ascii_to_petscii
	; LineNumber: 297
	; Binary clause Simplified: GREATEREQUAL
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$41;keep
	bcc txt_ascii_to_petscii_elseblock27
txt_ascii_to_petscii_localsuccess38: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a <= N with a <= N-1
	; Binary clause Simplified: LESS
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$5b;keep
	bcs txt_ascii_to_petscii_elseblock27
txt_ascii_to_petscii_ConditionalTrueBlock26: ;Main true block ;keep 
	; LineNumber: 298
	; LineNumber: 299
	; Optimizer: a = a +/- b
	lda txt__ASCII_CH
	clc
	adc #$20
	sta txt__ASCII_CH
	; LineNumber: 301
	jmp txt_ascii_to_petscii_elsedoneblock28
txt_ascii_to_petscii_elseblock27
	; LineNumber: 302
	; LineNumber: 303
	; Binary clause Simplified: GREATEREQUAL
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$61;keep
	bcc txt_ascii_to_petscii_elsedoneblock44
txt_ascii_to_petscii_localsuccess46: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: LESS
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$7b;keep
	bcs txt_ascii_to_petscii_elsedoneblock44
txt_ascii_to_petscii_ConditionalTrueBlock42: ;Main true block ;keep 
	; LineNumber: 304
	; LineNumber: 305
	; Optimizer: a = a +/- b
	lda txt__ASCII_CH
	sec
	sbc #$20
	sta txt__ASCII_CH
	; LineNumber: 306
txt_ascii_to_petscii_elsedoneblock44
	; LineNumber: 307
txt_ascii_to_petscii_elsedoneblock28
	; LineNumber: 309
	; Binary clause Simplified: GREATEREQUAL
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$7f;keep
	bcc txt_ascii_to_petscii_elsedoneblock51
txt_ascii_to_petscii_ConditionalTrueBlock49: ;Main true block ;keep 
	; LineNumber: 310
	; LineNumber: 311
	; Optimizer: a = a +/- b
	lda txt__ASCII_CH
	sec
	sbc #$80
	sta txt__ASCII_CH
	; LineNumber: 312
txt_ascii_to_petscii_elsedoneblock51
	; LineNumber: 314
	; Binary clause Simplified: EQUALS
	lda txt__ASCII_CH
	; Compare with pure num / var optimization
	cmp #$40;keep
	bne txt_ascii_to_petscii_elsedoneblock57
txt_ascii_to_petscii_ConditionalTrueBlock55: ;Main true block ;keep 
	; LineNumber: 315
	; LineNumber: 316
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt__ASCII_CH
	; LineNumber: 317
txt_ascii_to_petscii_elsedoneblock57
	; LineNumber: 319
	lda txt__ASCII_CH
	rts
	; LineNumber: 321
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_put_char_at
	;    Procedure type : User-defined procedure
	; LineNumber: 421
	; LineNumber: 420
txt__atx	dc.b	0
	; LineNumber: 420
txt__aty	dc.b	0
	; LineNumber: 420
txt__atchar	dc.b	0
txt_put_char_at_block60
txt_put_char_at
	; LineNumber: 423
	; Load Integer array
	lda txt__aty
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	sta txt_screen_memory
	sty txt_screen_memory+1
	; LineNumber: 424
	lda txt__atchar
	; Calling storevariable on generic assign expression
	sta txt__ASCII_CH
	jsr txt_ascii_to_petscii
	; Calling storevariable on generic assign expression
	; Storing to a pointer
	ldy txt__atx ; optimized, look out for bugs
	sta (txt_screen_memory),y
	; LineNumber: 426
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 429
txt_cursor_return
	; LineNumber: 431
	; Assigning to register
	; Assigning register : _a
	lda #$d
	; LineNumber: 432
	jsr $ffd2
	; LineNumber: 434
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_print_string
	;    Procedure type : User-defined procedure
	; LineNumber: 455
	; LineNumber: 454
txt_next_ch	dc.b	0
	; LineNumber: 452
txt_in_str	= $76
	; LineNumber: 452
txt_CRLF	dc.b	$01
txt_print_string_block62
txt_print_string
	; LineNumber: 457
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_next_ch
	; LineNumber: 458
txt_print_string_while63
txt_print_string_loopstart67
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock66
txt_print_string_ConditionalTrueBlock64: ;Main true block ;keep 
	; LineNumber: 458
	; LineNumber: 460
	; Assigning to register
	; Assigning register : _a
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; LineNumber: 461
	jsr $ffd2
	; LineNumber: 462
	; Test Inc dec D
	inc txt_next_ch
	; LineNumber: 463
	jmp txt_print_string_while63
txt_print_string_elsedoneblock66
txt_print_string_loopend68
	; LineNumber: 465
	
; //cursor_down();
	; Binary clause Simplified: NOTEQUALS
	lda txt_CRLF
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock74
txt_print_string_ConditionalTrueBlock72: ;Main true block ;keep 
	; LineNumber: 466
	; LineNumber: 467
	jsr txt_cursor_return
	; LineNumber: 469
txt_print_string_elsedoneblock74
	; LineNumber: 470
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_put_dec_at
	;    Procedure type : User-defined procedure
	; LineNumber: 555
	; LineNumber: 554
txt_tnat	dc.b	0
	; LineNumber: 552
txt__natx	dc.b	0
	; LineNumber: 552
txt__naty	dc.b	0
	; LineNumber: 552
txt__nat	dc.b	0
txt_put_dec_at_block77
txt_put_dec_at
	; LineNumber: 557
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_max_digits
	sty txt_max_digits+1
	; LineNumber: 558
	; Calling storevariable on generic assign expression
	sta txt_next_digit
	sty txt_next_digit+1
	; LineNumber: 559
	lda #$00
	ldx #$00
	sta txt_temp_num_p
	stx txt_temp_num_p+1
	; LineNumber: 560
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 561
	; Calling storevariable on generic assign expression
	sta txt_temp_i
	; LineNumber: 563
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda txt__nat
	; Compare with pure num / var optimization
	cmp #$a;keep
	bcc txt_put_dec_at_localfailed129
	jmp txt_put_dec_at_ConditionalTrueBlock79
txt_put_dec_at_localfailed129
	jmp txt_put_dec_at_elseblock80
txt_put_dec_at_ConditionalTrueBlock79: ;Main true block ;keep 
	; LineNumber: 563
	; LineNumber: 565
	lda txt__nat
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 566
txt_put_dec_at_while131
txt_put_dec_at_loopstart135
	; Binary clause INTEGER: GREATER
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda txt_temp_num+1   ; compare high bytes
	cmp #$00 ;keep
	bcc txt_put_dec_at_elsedoneblock134
	bne txt_put_dec_at_ConditionalTrueBlock132
	lda txt_temp_num
	cmp #$01 ;keep
	bcc txt_put_dec_at_elsedoneblock134
	beq txt_put_dec_at_elsedoneblock134
txt_put_dec_at_ConditionalTrueBlock132: ;Main true block ;keep 
	; LineNumber: 567
	; LineNumber: 568
	lda txt_max_digits
	clc
	adc #$01
	sta txt_max_digits+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc txt_put_dec_at_WordAdd140
	inc txt_max_digits+1
txt_put_dec_at_WordAdd140
	; LineNumber: 569
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	; integer assignment NodeVar
	ldy txt_temp_num+1 ; keep
	lda txt_temp_num
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	ldy #0
	lda #$a
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 570
	jmp txt_put_dec_at_while131
txt_put_dec_at_elsedoneblock134
txt_put_dec_at_loopend136
	; LineNumber: 572
	; Binary clause Simplified: GREATEREQUAL
	lda txt__nat
	; Compare with pure num / var optimization
	cmp #$64;keep
	bcc txt_put_dec_at_localfailed160
	jmp txt_put_dec_at_ConditionalTrueBlock142
txt_put_dec_at_localfailed160
	jmp txt_put_dec_at_elseblock143
txt_put_dec_at_ConditionalTrueBlock142: ;Main true block ;keep 
	; LineNumber: 573
	; LineNumber: 575
	
; // Left
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	ldy #0
	lda txt__nat
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	lda #$64
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 576
	lda txt__natx
	; Calling storevariable on generic assign expression
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	ldy txt_temp_num+1
	lda txt_temp_num
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 579
	
; // middle 
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	ldy #0
	; HandleVarBinopB16bit
	; RHS is pure, optimization
	lda txt__nat
	sec
	sbc #$64
	; Testing for byte:  #$00
	; RHS is word, no optimization
	pha 
	tya 
	sbc #$00
	tay 
	pla 
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	ldy #0
	lda #$a
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 580
	; Binary clause INTEGER: GREATER
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda txt_temp_num+1   ; compare high bytes
	cmp #$00 ;keep
	bcc txt_put_dec_at_elsedoneblock166
	bne txt_put_dec_at_ConditionalTrueBlock164
	lda txt_temp_num
	cmp #$09 ;keep
	bcc txt_put_dec_at_elsedoneblock166
	beq txt_put_dec_at_elsedoneblock166
txt_put_dec_at_ConditionalTrueBlock164: ;Main true block ;keep 
	; LineNumber: 579
	lda txt_temp_num
	sec
	sbc #$0a
	sta txt_temp_num+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcs txt_put_dec_at_WordAdd170
	dec txt_temp_num+1
txt_put_dec_at_WordAdd170
txt_put_dec_at_elsedoneblock166
	; LineNumber: 581
	; 8 bit binop
	; Add/sub where right value is constant number
	lda txt__natx
	clc
	adc #$1
	 ; end add / sub var with constant
	; Calling storevariable on generic assign expression
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	ldy txt_temp_num+1
	lda txt_temp_num
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 584
	
; // right digit
	; HandleVarBinopB16bit
	ldy #0 ; ::HandleVarBinopB16bit 0
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	lda txt__nat
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	lda #$a
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	sta mul16x8_num1
	sty mul16x8_num1Hi
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$a
	sta mul16x8_num2
	jsr mul16x8_procedure
txt_put_dec_at_rightvarInteger_var172 = $8A
	sta txt_put_dec_at_rightvarInteger_var172
	sty txt_put_dec_at_rightvarInteger_var172+1
	lda txt__nat+1
	sec
	sbc txt_put_dec_at_rightvarInteger_var172+1
	tay
	lda txt__nat
	sec
	sbc txt_put_dec_at_rightvarInteger_var172
	bcs txt_put_dec_at_wordAdd171
	dey
txt_put_dec_at_wordAdd171
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 585
	; Optimizer: a = a +/- b
	lda txt__natx
	clc
	adc #$2
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	ldy txt_temp_num+1
	lda txt_temp_num
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 586
	; Optimizer: a = a +/- b
	lda txt__natx
	clc
	adc #$3
	sta txt__text_x
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 588
	jmp txt_put_dec_at_elsedoneblock144
txt_put_dec_at_elseblock143
	; LineNumber: 589
	; LineNumber: 592
	
; // left digit
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	ldy #0
	lda txt__nat
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	lda #$a
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 593
	lda txt__natx
	; Calling storevariable on generic assign expression
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	ldy txt_temp_num+1
	lda txt_temp_num
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 596
	
; // right digit 
	; HandleVarBinopB16bit
	ldy #0 ; ::HandleVarBinopB16bit 0
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16x8 div
	lda txt__nat
	sta initdiv16x8_dividend
	sty initdiv16x8_dividend+1
	lda #$a
	sta initdiv16x8_divisor
	sty initdiv16x8_divisor+1
	jsr divide16x8
	lda initdiv16x8_dividend
	ldy initdiv16x8_dividend+1
	sta mul16x8_num1
	sty mul16x8_num1Hi
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$a
	sta mul16x8_num2
	jsr mul16x8_procedure
txt_put_dec_at_rightvarInteger_var175 = $8A
	sta txt_put_dec_at_rightvarInteger_var175
	sty txt_put_dec_at_rightvarInteger_var175+1
	lda txt__nat+1
	sec
	sbc txt_put_dec_at_rightvarInteger_var175+1
	tay
	lda txt__nat
	sec
	sbc txt_put_dec_at_rightvarInteger_var175
	bcs txt_put_dec_at_wordAdd174
	dey
txt_put_dec_at_wordAdd174
	; Calling storevariable on generic assign expression
	sta txt_temp_num
	sty txt_temp_num+1
	; LineNumber: 597
	; 8 bit binop
	; Add/sub where right value is constant number
	lda txt__natx
	clc
	adc #$1
	 ; end add / sub var with constant
	; Calling storevariable on generic assign expression
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	ldy txt_temp_num+1
	lda txt_temp_num
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 598
	; Optimizer: a = a +/- b
	lda txt__natx
	clc
	adc #$2
	sta txt__text_x
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 599
txt_put_dec_at_elsedoneblock144
	; LineNumber: 603
	jmp txt_put_dec_at_elsedoneblock81
txt_put_dec_at_elseblock80
	; LineNumber: 604
	; LineNumber: 605
	lda txt__natx
	; Calling storevariable on generic assign expression
	sta txt__atx
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__aty
	; Optimizer: a = a +/- b
	lda txt__nat
	clc
	adc #$30
	sta txt__atchar
	jsr txt_put_char_at
	; LineNumber: 606
	; 8 bit binop
	; Add/sub where right value is constant number
	lda txt__natx
	clc
	adc #$1
	 ; end add / sub var with constant
	; Calling storevariable on generic assign expression
	sta txt__text_x
	lda txt__naty
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 607
txt_put_dec_at_elsedoneblock81
	; LineNumber: 608
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 367
Key_Read
	; LineNumber: 369
	lda #$0
	; Calling storevariable on generic assign expression
	sta Key_keyState
	; LineNumber: 398
	
; // row to test
	; Calling storevariable on generic assign expression
	sta Key_temp
Key_Read_forloop178
	; LineNumber: 372
	; LineNumber: 374
	lda Key_temp
	; Calling storevariable on generic assign expression
	sta Key_KeyRow
	; LineNumber: 376
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 397
Key_Read_forloopcounter180
Key_Read_loopstart181
	; Compare is onpage
	; Test Inc dec D
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop178
Key_Read_loopdone185: ;keep
Key_Read_forloopend179
Key_Read_loopend182
	; LineNumber: 399
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 415
	; LineNumber: 414
Key_Pressed_block186
Key_Pressed
	; LineNumber: 417
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 425
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 61
init_screen
	; LineNumber: 62
	lda #<map
	ldx #>map
	sta map_p
	stx map_p+1
	; LineNumber: 63
	lda #$0
	; Calling storevariable on generic assign expression
	sta a
	; LineNumber: 65
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 68
draw_screen
	; LineNumber: 70
	; INTEGER optimization: a=b+c 
	lda #<map
	clc
	adc sx
	sta map_p+0
	lda #>map
	adc sx+1
	sta map_p+1
	; LineNumber: 76
	lda #$0
	; Calling storevariable on generic assign expression
	sta i
draw_screen_forloop190
	; LineNumber: 71
	; LineNumber: 72
	; Load Integer array
	lda i
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	sta des
	sty des+1
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy199
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy199
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
draw_screen_forloopcounter192
draw_screen_loopstart193
	; Compare is onpage
	; Test Inc dec D
	inc i
	lda #$18
	cmp i ;keep
	bne draw_screen_forloop190
draw_screen_loopdone201: ;keep
draw_screen_forloopend191
draw_screen_loopend194
	; LineNumber: 77
	lda #$1e
	; Calling storevariable on generic assign expression
	sta txt__natx
	lda #$18
	; Calling storevariable on generic assign expression
	sta txt__naty
	lda y
	; Calling storevariable on generic assign expression
	sta txt__nat
	jsr txt_put_dec_at
	; LineNumber: 78
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt__natx
	lda #$18
	; Calling storevariable on generic assign expression
	sta txt__naty
	; integer assignment NodeVar
	ldy sx+1 ; keep
	lda sx
	; Calling storevariable on generic assign expression
	sta txt__nat
	jsr txt_put_dec_at
	; LineNumber: 80
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_ship
	;    Procedure type : User-defined procedure
	; LineNumber: 86
draw_ship
	; LineNumber: 89
	; HandleVarBinopB16bit
	; RHS is pure, optimization
	; Load Integer array
	lda y
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	clc
	adc x
	; Testing for byte:  #0
	; RHS is byte, optimization
	bcc draw_ship_skip204
	iny
draw_ship_skip204
	sta sdes
	sty sdes+1
	; LineNumber: 89
	; memcpy
	ldy #0
draw_ship_memcpy205
	lda ship+ $00,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy205
	; LineNumber: 91
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd206
	inc sdes+1
draw_ship_WordAdd206
	; LineNumber: 92
	; memcpy
	ldy #0
draw_ship_memcpy207
	lda ship+ $05,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy207
	; LineNumber: 93
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd208
	inc sdes+1
draw_ship_WordAdd208
	; LineNumber: 93
	; memcpy
	ldy #0
draw_ship_memcpy209
	lda ship+ $0a,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy209
	; LineNumber: 97
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_frame
	;    Procedure type : User-defined procedure
	; LineNumber: 99
draw_frame
	; LineNumber: 104
	; Binary clause Simplified: NOTEQUALS
	; Get bit
	lda $e840
	and #%100000
	beq draw_frame_getbit_false237
	lda #1
draw_frame_getbit_false237
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq draw_frame_elsedoneblock214
draw_frame_ConditionalTrueBlock212: ;Main true block ;keep 
	; LineNumber: 105
	; LineNumber: 107
	
; // This will run approx 60hz so we need to figure out vertical blank
	; Test Inc dec D
	inc a
	lda a
	cmp #$168 ; keep
	bne draw_frame_incmax239
	lda #$0
	sta a
draw_frame_incmax239
	; LineNumber: 108
	; Binary clause Simplified: EQUALS
	lda a
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne draw_frame_elsedoneblock243
draw_frame_ConditionalTrueBlock241: ;Main true block ;keep 
	; LineNumber: 108
	; LineNumber: 110
	lda sx
	clc
	adc #$01
	sta sx+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_frame_WordAdd253
	inc sx+1
draw_frame_WordAdd253
	; LineNumber: 111
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda sx+1   ; compare high bytes
	cmp #$01 ;keep
	bne draw_frame_elsedoneblock257
	lda sx
	cmp #$90 ;keep
	bne draw_frame_elsedoneblock257
	jmp draw_frame_ConditionalTrueBlock255
draw_frame_ConditionalTrueBlock255: ;Main true block ;keep 
	; LineNumber: 110
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta sx
	sty sx+1
draw_frame_elsedoneblock257
	; LineNumber: 112
	jsr draw_screen
	; LineNumber: 113
draw_frame_elsedoneblock243
	; LineNumber: 114
	jsr draw_ship
	; LineNumber: 115
draw_frame_elsedoneblock214
	; LineNumber: 118
	; ****** Inline assembler section
	jmp(org_ad)
	; LineNumber: 120
	rts
	
; // Return control to regular programming	
	; NodeProcedureDecl -1
	; ***********  Defining procedure : setup_irq
	;    Procedure type : User-defined procedure
	; LineNumber: 125
setup_irq
	; LineNumber: 127
	; Generic 16 bit op
	ldy #0
	lda irq_ad
setup_irq_rightvarInteger_var263 = $8A
	sta setup_irq_rightvarInteger_var263
	sty setup_irq_rightvarInteger_var263+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	lda irq_ad+1
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc setup_irq_rightvarInteger_var263
setup_irq_wordAdd261
	sta setup_irq_rightvarInteger_var263
	; High-bit binop
	tya
	adc setup_irq_rightvarInteger_var263+1
	tay
	lda setup_irq_rightvarInteger_var263
	; Calling storevariable on generic assign expression
	sta org_ad
	sty org_ad+1
	; LineNumber: 128
	lda #<draw_frame
	ldy #>draw_frame
	sta new_ad
	sty new_ad+1
	; LineNumber: 130
	; ****** Inline assembler section
	sei	
	; LineNumber: 131
	; integer assignment NodeVar
	ldy new_ad+1 ; keep
	; Calling storevariable on generic assign expression
	sta irq_ad
	sty irq_ad+1
	; LineNumber: 132
	; ****** Inline assembler section
	cli	
	; LineNumber: 135
	rts
block1
	; LineNumber: 143
	; main program 
	jsr txt_cls
	; LineNumber: 144
	; Assigning a string : txt_in_str
	lda #<MainProgram_stringassignstr264
	sta txt_in_str
	lda #>MainProgram_stringassignstr264
	sta txt_in_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 147
	jsr init_screen
	; LineNumber: 148
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta sx
	sty sx+1
	; LineNumber: 149
	lda #$4
	; Calling storevariable on generic assign expression
	sta sy
	sty sy+1
	; LineNumber: 150
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	; LineNumber: 151
	lda #$a
	; Calling storevariable on generic assign expression
	sta y
	; LineNumber: 154
	jsr setup_irq
	; LineNumber: 155
	lda #$1
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 156
	lda #$0
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 160
	
; // Numeric Keypad
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable on generic assign expression
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 161
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 162
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 163
	; Integer constant assigning
	ldy #$80
	; Calling storevariable on generic assign expression
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 166
	
; // Regular keys        
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable on generic assign expression
	sta key_up
	sty key_up+1
	; LineNumber: 167
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta key_down
	sty key_down+1
	; LineNumber: 168
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta key_left
	sty key_left+1
	; LineNumber: 169
	; Integer constant assigning
	ldy #$02
	; Calling storevariable on generic assign expression
	sta key_right
	sty key_right+1
	; LineNumber: 172
	
; //draw_frame();
MainProgram_while266
MainProgram_loopstart270
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_localfailed413
MainProgram_localsuccess414: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne MainProgram_localfailed413
	jmp MainProgram_ConditionalTrueBlock267
MainProgram_localfailed413
	jmp MainProgram_elsedoneblock269
MainProgram_ConditionalTrueBlock267: ;Main true block ;keep 
	; LineNumber: 173
	; LineNumber: 177
	jsr Key_Read
	; LineNumber: 181
	lda x
	; Calling storevariable on generic assign expression
	sta old_x
	; LineNumber: 182
	lda y
	; Calling storevariable on generic assign expression
	sta old_y
	; LineNumber: 183
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_localfailed443
	jmp MainProgram_ConditionalTrueBlock417
MainProgram_localfailed443: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock419
MainProgram_ConditionalTrueBlock417: ;Main true block ;keep 
	; LineNumber: 184
	; LineNumber: 185
	; Binary clause Simplified: GREATEREQUAL
	lda y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc MainProgram_elsedoneblock448
MainProgram_ConditionalTrueBlock446: ;Main true block ;keep 
	; LineNumber: 186
	; LineNumber: 187
	; Test Inc dec D
	dec y
	; LineNumber: 188
	; Binary clause Simplified: LESS
	lda y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcs MainProgram_elsedoneblock462
MainProgram_ConditionalTrueBlock460: ;Main true block ;keep 
	; LineNumber: 187
	lda sy
	sec
	sbc #$01
	sta sy+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcs MainProgram_WordAdd466
	dec sy+1
MainProgram_WordAdd466
MainProgram_elsedoneblock462
	; LineNumber: 189
MainProgram_elsedoneblock448
	; LineNumber: 190
MainProgram_elsedoneblock419
	; LineNumber: 192
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_localfailed478
	jmp MainProgram_ConditionalTrueBlock468
MainProgram_localfailed478: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock470
MainProgram_ConditionalTrueBlock468: ;Main true block ;keep 
	; LineNumber: 193
	; LineNumber: 194
	; Binary clause Simplified: LESS
	lda x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs MainProgram_elsedoneblock483
MainProgram_ConditionalTrueBlock481: ;Main true block ;keep 
	; LineNumber: 195
	; LineNumber: 196
	; Test Inc dec D
	inc x
	; LineNumber: 197
MainProgram_elsedoneblock483
	; LineNumber: 198
MainProgram_elsedoneblock470
	; LineNumber: 200
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_localfailed513
	jmp MainProgram_ConditionalTrueBlock487
MainProgram_localfailed513: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock489
MainProgram_ConditionalTrueBlock487: ;Main true block ;keep 
	; LineNumber: 201
	; LineNumber: 202
	; Binary clause Simplified: LESS
	lda y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs MainProgram_elsedoneblock518
MainProgram_ConditionalTrueBlock516: ;Main true block ;keep 
	; LineNumber: 203
	; LineNumber: 204
	; Test Inc dec D
	inc y
	; LineNumber: 205
	; Binary clause Simplified: GREATEREQUAL
	lda y
	; Compare with pure num / var optimization
	cmp #$10;keep
	bcc MainProgram_elsedoneblock532
MainProgram_ConditionalTrueBlock530: ;Main true block ;keep 
	; LineNumber: 204
	lda sy
	clc
	adc #$01
	sta sy+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc MainProgram_WordAdd536
	inc sy+1
MainProgram_WordAdd536
MainProgram_elsedoneblock532
	; LineNumber: 206
MainProgram_elsedoneblock518
	; LineNumber: 207
MainProgram_elsedoneblock489
	; LineNumber: 208
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_localfailed548
	jmp MainProgram_ConditionalTrueBlock538
MainProgram_localfailed548: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock540
MainProgram_ConditionalTrueBlock538: ;Main true block ;keep 
	; LineNumber: 209
	; LineNumber: 210
	; Binary clause Simplified: GREATEREQUAL
	lda x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc MainProgram_elsedoneblock553
MainProgram_ConditionalTrueBlock551: ;Main true block ;keep 
	; LineNumber: 211
	; LineNumber: 212
	; Test Inc dec D
	dec x
	; LineNumber: 213
MainProgram_elsedoneblock553
	; LineNumber: 214
MainProgram_elsedoneblock540
	; LineNumber: 219
	jmp MainProgram_while266
MainProgram_elsedoneblock269
MainProgram_loopend271
	; LineNumber: 221
	; End of program
	; Ending memory block
EndBlock410
MainProgram_stringassignstr264	.dc "PET TEST",0
