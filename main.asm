 processor 6502
	org $401
	; Starting new memory block at $401
StartBlock401
	.byte $b ; lo byte of next line
	.byte $4 ; hi byte of next line
	.byte $0a, $00 ; line 10 (lo, hi)
	.byte $9e, $20 ; SYS token and a space
	.byte   $31,$30,$34,$30
	.byte $00, $00, $00 ; end of program
	; Ending memory block
EndBlock401
	org $410
	; Starting new memory block at $410
StartBlock410
PET40
	; LineNumber: 300
	jmp block1
	; LineNumber: 5
txt_temp_address_p	= $68
	; LineNumber: 6
txt_ytab	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w 0
	; LineNumber: 4
Interrupts_interruptFlag = $e813
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 12
ticks	dc.b	0
	; LineNumber: 13
i	dc.b	0
	; LineNumber: 13
ALIVE	dc.b	0
	; LineNumber: 13
WON_GAME	dc.b	0
	; LineNumber: 14
x	dc.b	0
	; LineNumber: 14
y	dc.b	0
	; LineNumber: 14
old_x	dc.b	0
	; LineNumber: 14
old_y	dc.b	0
	; LineNumber: 15
sx	dc.w	0
	; LineNumber: 15
sy	dc.w	0
	; LineNumber: 18
des	=  $6A
	; LineNumber: 18
map_p	=  $6C
	; LineNumber: 19
n_key_up	dc.w	0
	; LineNumber: 19
n_key_down	dc.w	0
	; LineNumber: 19
n_key_left	dc.w	0
	; LineNumber: 19
n_key_right	dc.w	0
	; LineNumber: 19
key_up	dc.w	0
	; LineNumber: 19
key_down	dc.w	0
	; LineNumber: 19
key_left	dc.w	0
	; LineNumber: 19
key_right	dc.w	0
	; LineNumber: 23
sdes	=  $6E
	; LineNumber: 24
ship	
	dc.b	124, 251, 236, 98, 123, 32, 251, 236, 252
	dc.b	255, 124, 226, 226, 32, 32, 0
	; LineNumber: 30
map	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $062, $07b, $0fb, $0a0, $0a0, $0e2, $0e2
	dc.b $07e, $020, $06c, $06c, $020, $0e2, $0ec, $07e
	dc.b $062, $0a0, $07e, $06c, $07f, $07f, $07e, $07e
	dc.b $07e, $0a0, $061, $020, $0ec, $0ec, $0ec, $0ff
	dc.b $07b, $0fb, $0ec, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0e2, $07e
	dc.b $020, $020, $020, $020, $0a0, $0fc, $07e, $0fe
	dc.b $0e1, $0a0, $0ff, $06c, $061, $020, $062, $07b
	dc.b $06c, $020, $020, $020, $020, $0a0, $0fc, $07e
	dc.b $0fe, $0e1, $0a0, $0ff, $06c, $061, $020, $062
	dc.b $07b, $06c, $020, $0e1, $0a0, $0ff, $06c, $061
	dc.b $0a0, $0fc, $07e, $0fe, $020, $06c, $062, $020
	dc.b $07b, $020, $020, $020, $020, $062, $0ec, $07e
	dc.b $020, $020, $020, $0fe, $07e, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e2, $0e2, $0e2, $020
	dc.b $07c, $0e2, $0fb, $0e1, $0e2, $020, $06c, $0a0
	dc.b $0ec, $06c, $07f, $07f, $07f, $07e, $06c, $0fe
	dc.b $0a0, $07e, $020, $06c, $07f, $07f, $07e, $06c
	dc.b $0a0, $0ec, $020, $07c, $0ff, $0ff, $07b, $020
	dc.b $07b, $0a0, $0ec, $0fe, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $07e
	dc.b $020, $0fb, $0a0, $0ec, $020, $07c, $0e2, $07e
	dc.b $07c, $07e, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $07e, $020, $0fb, $0a0, $0ec, $020, $07c, $0e2
	dc.b $07e, $07c, $07e, $020, $0fb, $0a0, $0ec, $020
	dc.b $07c, $0a0, $0a0, $07e, $020, $0e2, $0e2, $020
	dc.b $0e2, $020, $020, $020, $0fe, $07e, $020, $020
	dc.b $020, $062, $0fe, $07f, $0ff, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $0e2
	dc.b $0e2, $0e2, $0fb, $020, $062, $0a0, $0a0, $07e
	dc.b $06c, $07f, $07f, $07e, $020, $062, $0a0, $0ec
	dc.b $07e, $06c, $07f, $07f, $07f, $07e, $06c, $0a0
	dc.b $0e2, $020, $07b, $0ff, $0ff, $0ff, $020, $0fe
	dc.b $061, $0fb, $0ec, $0fe, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $061
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0a0
	dc.b $061, $0e1, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0e1, $0a0, $020
	dc.b $061, $020, $020, $06c, $0a0, $0e2, $0fb, $06c
	dc.b $0fe, $0a0, $07e, $0fe, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fb
	dc.b $07b, $0e2, $07e, $06c, $0fc, $06c, $06c, $06c
	dc.b $07f, $07e, $020, $062, $0a0, $0a0, $0e2, $06c
	dc.b $07f, $07f, $0fc, $0a0, $062, $0fe, $0ec, $020
	dc.b $020, $0ff, $0ff, $0fe, $07c, $06c, $0fe, $0e2
	dc.b $020, $07f, $0fc, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $020
	dc.b $0fe, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fc
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0e1, $07b, $06c
	dc.b $061, $020, $020, $0fe, $0ec, $07b, $0e1, $0a0
	dc.b $0ec, $020, $0fe, $0a0, $0e2, $06c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0e2, $0e2, $0e2, $07e, $07e, $07e, $07e
	dc.b $062, $062, $0a0, $0ec, $07e, $020, $07c, $07e
	dc.b $07f, $07e, $0e2, $0e2, $0e2, $020, $06c, $0e2
	dc.b $0e2, $0ff, $0a0, $0a0, $0a0, $0e2, $07e, $062
	dc.b $061, $07f, $07e, $07f, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $0e2
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $0e2, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $0e2
	dc.b $020, $020, $020, $0a0, $061, $06c, $0a0, $0ec
	dc.b $06c, $06c, $0ec, $06c, $0fe, $0e2, $07e, $020
	dc.b $020, $06c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fb
	dc.b $0ec, $020, $020, $062, $0ec, $06c, $0fe, $061
	dc.b $07b, $0fe, $0a0, $0a0, $0fc, $07c, $07b, $0fe
	dc.b $0a0, $062, $062, $020, $07b, $062, $0fe, $062
	dc.b $07b, $07f, $07e, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0fb, $020, $0ec, $020, $020
	dc.b $0a0, $07b, $020, $0e2, $06c, $0fe, $0fe, $07b
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $020, $0fe, $061, $0ec, $06c, $0ec, $020, $061
	dc.b $0fc, $0ec, $06c, $0a0, $0e2, $0fb, $0fc, $0ec
	dc.b $06c, $0a0, $0e2, $0fb, $0fc, $0ec, $06c, $0a0
	dc.b $07e, $06c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0fe, $061, $020, $020
	dc.b $020, $0a0, $07b, $07c, $07e, $020, $06c, $07b
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $062, $062, $062, $0fe
	dc.b $06c, $0a0, $061, $06c, $0ec, $0ff, $020, $061
	dc.b $0e2, $06c, $0a0, $07f, $07e, $0e1, $0e2, $06c
	dc.b $0a0, $07f, $07e, $0e1, $0e2, $06c, $0a0, $07f
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0e2, $020, $020, $020
	dc.b $07c, $0fc, $07e, $0a0, $0a0, $0ec, $0fb, $0a0
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $07e
	dc.b $0e1, $07e, $020, $0fb, $0ec, $0ff, $020, $07e
	dc.b $020, $0fb, $0a0, $07f, $07e, $020, $020, $0fb
	dc.b $0a0, $07f, $07e, $020, $020, $0fb, $0a0, $07f
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07c, $020, $020, $020, $020
	dc.b $0fb, $0ec, $020, $0e1, $0a0, $020, $020, $0fb
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07c, $0e2, $07c, $020, $020
	dc.b $020, $07c, $0e2, $07e, $07e, $020, $020, $07c
	dc.b $0e2, $07e, $07e, $020, $020, $07c, $0e2, $07e
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07e
	dc.b $07e, $020, $020, $07c, $061, $06c, $0fc, $07c
	dc.b $061, $020, $07b, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0e1, $0ec, $0ff, $020, $020
	dc.b $020, $0e1, $0a0, $0fb, $07e, $020, $020, $0e1
	dc.b $0a0, $0fb, $07e, $020, $020, $0e1, $0a0, $0fb
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0fe, $061, $0e1, $0fe, $07e
	dc.b $0fc, $0fe, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0e1, $07f, $0a0, $020, $0e2, $020
	dc.b $0ec, $0e2, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0e2, $07b
	dc.b $020, $020, $07c, $0a0, $07c, $0fc, $062, $0fe
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07f, $020, $0ff
	dc.b $06c, $020, $020, $0fb, $07b, $07c, $0fb, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $0a0, $020, $020, $020, $020, $062, $020, $0fb
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $062, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fc, $07b, $020, $0e1, $07e, $07f, $06c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $062, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $0a0, $0ec, $0a0, $0fc, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $062, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $07b, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $062, $0a0
	dc.b $0ec, $0a0, $0fc, $07b, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0a0, $062, $020, $07f, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $0a0, $0fb, $0e2, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0fe, $0ec, $07f, $0fc, $020, $0e2, $0a0
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $0a0, $0fb, $0e2, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0fe, $0ec, $0fb, $07b, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0fb, $0e2, $0a0, $061, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0fe, $0ec, $07f
	dc.b $0fc, $020, $0e2, $0a0, $0fc, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0e1, $0ec, $06c, $062, $07b, $0fb
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0a0, $0a0, $07e, $0e1, $020, $07c
	dc.b $0fb, $0a0, $07b, $020, $020, $06c, $0fe, $0fe
	dc.b $0a0, $07f, $07f, $0fb, $0a0, $020, $020, $020
	dc.b $0fb, $061, $07e, $020, $020, $020, $0fe, $0fc
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0a0, $0a0, $07e, $0e1, $020, $07c
	dc.b $0fb, $0a0, $07b, $020, $020, $06c, $0fe, $0fe
	dc.b $0a0, $07f, $07f, $0fb, $0a0, $07f, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $07e, $0e1, $020, $07c, $0fb, $0a0, $07b, $020
	dc.b $020, $06c, $0fe, $0fe, $0a0, $07f, $07f, $0fb
	dc.b $0a0, $020, $020, $020, $0fb, $061, $07e, $020
	dc.b $020, $020, $0fe, $0fc, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $07e, $020, $07c, $07b
	dc.b $0fc, $07b, $020, $020, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $0a0, $07b, $06c
	dc.b $07b, $020, $0e2, $0fc, $07c, $0fb, $0a0, $0fc
	dc.b $07f, $06c, $07f, $0a0, $0a0, $061, $07c, $07b
	dc.b $020, $07c, $0fc, $07b, $020, $0fe, $0a0, $07c
	dc.b $0fb, $0fc, $07b, $020, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $0a0, $07b, $06c
	dc.b $07b, $020, $0e2, $0fc, $07c, $0fb, $0a0, $0fc
	dc.b $07f, $06c, $07f, $0a0, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $0fe, $0a0, $0a0, $07e
	dc.b $020, $0a0, $07b, $06c, $07b, $020, $0e2, $0fc
	dc.b $07c, $0fb, $0a0, $0fc, $07f, $06c, $07f, $0a0
	dc.b $0a0, $061, $07c, $07b, $020, $07c, $0fc, $07b
	dc.b $020, $0fe, $0a0, $07c, $0fb, $0fc, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fe
	dc.b $0a0, $0fc, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0fe, $0e2, $0fb, $0fc, $020, $020
	dc.b $020, $020, $020, $020, $07f, $062, $0ff, $020
	dc.b $020, $0e2, $061, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0fc, $0a0, $0e1, $0a0, $0fc, $020
	dc.b $07f, $0fb, $07b, $07c, $0fb, $062, $07c, $0fb
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $07b, $0fb
	dc.b $0fc, $07b, $020, $020, $0e1, $0a0, $0a0, $07f
	dc.b $020, $0fb, $0a0, $0fc, $020, $020, $020, $0fe
	dc.b $0a0, $0a0, $0fc, $0a0, $0e1, $0a0, $0fc, $020
	dc.b $07f, $0fb, $07b, $07c, $0fb, $062, $07c, $0fb
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $0a0, $0a0, $0fc, $0a0
	dc.b $0e1, $0a0, $0fc, $020, $07f, $0fb, $07b, $07c
	dc.b $0fb, $062, $07c, $0fb, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $0fb, $0fc, $07b, $020, $020
	dc.b $0e1, $0a0, $0a0, $07f, $020, $0fb, $0a0, $0fc
	dc.b $020, $020, $020, $0fe, $07b, $06c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e1, $0a0
	dc.b $07f, $07c, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0a0, $020, $0e1, $0a0, $020, $020
	dc.b $020, $020, $020, $062, $062, $07b, $020, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0fc, $0a0, $061, $0a0, $0a0, $0fc, $020
	dc.b $07f, $07f, $0fb, $07f, $020, $07c, $0fb, $062
	dc.b $07c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fe
	dc.b $0a0, $0a0, $0fc, $07c, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $020, $0fb, $0a0, $0fb, $07b, $062, $0a0
	dc.b $0a0, $0fc, $0a0, $061, $0a0, $0a0, $0fc, $020
	dc.b $07f, $07f, $0fb, $07f, $020, $07c, $0fb, $062
	dc.b $07c, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $0fb, $07b, $062, $0a0, $0a0, $0fc, $0a0, $061
	dc.b $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb, $07f
	dc.b $020, $07c, $0fb, $062, $07c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $061, $020, $0fb, $0a0
	dc.b $07e, $020, $0fe, $0ec, $06c, $07e, $07e, $0ff
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $062, $062, $062, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $062, $062, $062, $07b, $020, $020, $020
	dc.b $020, $06c, $062, $062, $062, $07b, $07c, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $0e1, $061, $020, $0a0, $07c, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $07f, $07f, $0fb, $0fb, $0fb, $062, $07c
	dc.b $0fc, $062, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0e1, $0fc, $0a0, $0a0, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $07f, $07f, $0fb, $0fb, $0fb, $062, $07c
	dc.b $0fc, $062, $0a0, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0a0
	dc.b $0a0, $0a0, $0ec, $0a0, $0a0, $0a0, $0fc, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $020, $07f, $07f, $0fb
	dc.b $0fb, $0fb, $062, $07c, $0fc, $062, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0e1, $0fc, $0ec
	dc.b $020, $0fe, $0ec, $0fe, $07e, $020, $0ff, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $06c
	dc.b $0a0, $0fb, $0fe, $07f, $0e2, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $06c
	dc.b $0a0, $0fb, $0fe, $07f, $0e2, $07b, $020, $020
	dc.b $06c, $0a0, $0fb, $0fe, $07f, $0e2, $07b, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fe, $0e2, $0fb, $0fc
	dc.b $020, $020, $07c, $0fc, $062, $0ec, $07c, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $07f, $0fc, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $061, $0a0, $0fc, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $07f, $0fc, $0fc, $0fc, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0a0, $0fc
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07f, $0fc
	dc.b $0fc, $0fc, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0ec, $020
	dc.b $0fe, $0a0, $0a0, $07e, $020, $07c, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $061, $07e, $07e, $07e, $06c, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $061, $07e, $07e, $07e, $06c, $07e, $020, $020
	dc.b $07c, $061, $07e, $07e, $07e, $06c, $07e, $0fc
	dc.b $07f, $07e, $061, $020, $020, $020, $0e1, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0a0, $020, $0e1, $0a0
	dc.b $020, $062, $062, $062, $020, $06c, $0a0, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 58
screen_buffer	dc.b	 
	org screen_buffer+1000
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $80     ;$59 used for hi-byte
initdiv16x8_dividend = $82	  ;$fc used for hi-byte
initdiv16x8_remainder = $84	  ;$fe used for hi-byte
initdiv16x8_result = $82 ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $80
mul16x8_num1 = $82
mul16x8_num2 = $84
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $80
div8x8_d = $82
div8x8_e = $84
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $80
multiplier_a = $82
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $82
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	;*
; //
; //	Output a string at the current cursor location.
; //	Set Carriage Return on/off	
; //	
; //	*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_text_colour
	;    Procedure type : User-defined procedure
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cls
	;    Procedure type : User-defined procedure
	; LineNumber: 254
txt_cls
	; LineNumber: 255
	; Assigning to register
	; Assigning register : _a
	lda #$93
	; LineNumber: 256
	jsr $ffd2
	; LineNumber: 257
	jsr txt_DefineScreen
	; LineNumber: 260
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_DefineScreen
	;    Procedure type : User-defined procedure
	; LineNumber: 266
	; LineNumber: 265
txt_y	dc.b	0
txt_DefineScreen_block4
txt_DefineScreen
	; LineNumber: 268
	; Binary clause INTEGER: NOTEQUALS
	; Load Integer array
	ldx #0 ; watch for bug, Integer array has max index of 128
	lda txt_ytab,x
	ldy txt_ytab+1,x
txt_DefineScreen_rightvarInteger_var10 = $88
	sta txt_DefineScreen_rightvarInteger_var10
	sty txt_DefineScreen_rightvarInteger_var10+1
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda txt_DefineScreen_rightvarInteger_var10+1   ; compare high bytes
	cmp #$00 ;keep
	beq txt_DefineScreen_pass111
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_pass111
	lda txt_DefineScreen_rightvarInteger_var10
	cmp #$00 ;keep
	beq txt_DefineScreen_elsedoneblock8
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_ConditionalTrueBlock6: ;Main true block ;keep 
	; LineNumber: 269
	; LineNumber: 270
	rts
	; LineNumber: 271
txt_DefineScreen_elsedoneblock8
	; LineNumber: 273
	lda #$00
	ldx #$80
	sta txt_temp_address_p
	stx txt_temp_address_p+1
	; LineNumber: 280
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_y
txt_DefineScreen_forloop13
	; LineNumber: 276
	; LineNumber: 277
	; integer assignment NodeVar
	ldy txt_temp_address_p+1 ; keep
	lda txt_temp_address_p
	; Calling storevariable on generic assign expression
	pha
	lda txt_y
	asl
	tax
	pla
	sta txt_ytab,x
	tya
	sta txt_ytab+1,x
	; LineNumber: 278
	lda txt_temp_address_p
	clc
	adc #$28
	sta txt_temp_address_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc txt_DefineScreen_WordAdd21
	inc txt_temp_address_p+1
txt_DefineScreen_WordAdd21
	; LineNumber: 279
txt_DefineScreen_forloopcounter15
txt_DefineScreen_loopstart16
	; Compare is onpage
	; Test Inc dec D
	inc txt_y
	lda #$18
	cmp txt_y ;keep
	bcs txt_DefineScreen_forloop13
txt_DefineScreen_loopdone22: ;keep
txt_DefineScreen_forloopend14
txt_DefineScreen_loopend17
	; LineNumber: 280
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_move_to
	;    Procedure type : User-defined procedure
	; LineNumber: 285
	; LineNumber: 284
txt_temp_p	=  $70
	; LineNumber: 282
txt__text_x	dc.b	0
	; LineNumber: 282
txt__text_y	dc.b	0
txt_move_to_block23
txt_move_to
	; LineNumber: 286
	; Load Integer array
	lda txt__text_y
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	sta txt_temp_p
	sty txt_temp_p+1
	; LineNumber: 286
	; Poke
	; Optimization: shift is zero
	sta $c4
	; LineNumber: 287
	
; // LSB
	; Poke
	; Optimization: shift is zero
	lda txt_temp_p+1
	sta $c5
	; LineNumber: 289
	
; // MSB
	; Poke
	; Optimization: shift is zero
	lda txt__text_x
	sta $c6
	; LineNumber: 290
	jsr $e07f
	rts
	
; // Clear keyboard buffer
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_clear_buffer
	;    Procedure type : User-defined procedure
	; LineNumber: 345
txt_clear_buffer
	; LineNumber: 346
	; Assigning to register
	; Assigning register : _x
	ldx #$0
	; LineNumber: 347
	; Poke
	; Optimization: shift is zero
	lda #$0
	sta $9e
	; LineNumber: 348
	; Poke
	; Optimization: shift is zero
	sta $26f
	; LineNumber: 349
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_wait_key
	;    Procedure type : User-defined procedure
	; LineNumber: 369
	; LineNumber: 368
txt_tmp_key_count	dc.b	$00
txt_wait_key_block25
txt_wait_key
	; LineNumber: 372
txt_wait_key_while26
txt_wait_key_loopstart30
	; Binary clause Simplified: EQUALS
	lda txt_tmp_key_count
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne txt_wait_key_elsedoneblock29
txt_wait_key_ConditionalTrueBlock27: ;Main true block ;keep 
	; LineNumber: 373
	; LineNumber: 374
	; Peek
	lda $9e + $0;keep
	; Calling storevariable on generic assign expression
	sta txt_tmp_key_count
	; LineNumber: 375
	jmp txt_wait_key_while26
txt_wait_key_elsedoneblock29
txt_wait_key_loopend31
	; LineNumber: 377
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_tmp_key_count
	; LineNumber: 378
	jsr txt_clear_buffer
	; LineNumber: 379
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 430
txt_cursor_return
	; LineNumber: 432
	; Assigning to register
	; Assigning register : _a
	lda #$d
	; LineNumber: 433
	jsr $ffd2
	; LineNumber: 435
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_print_string
	;    Procedure type : User-defined procedure
	; LineNumber: 456
	; LineNumber: 455
txt_next_ch	dc.b	0
	; LineNumber: 453
txt_in_str	=  $70
	; LineNumber: 453
txt_CRLF	dc.b	$01
txt_print_string_block35
txt_print_string
	; LineNumber: 458
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_next_ch
	; LineNumber: 459
txt_print_string_while36
txt_print_string_loopstart40
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock39
txt_print_string_ConditionalTrueBlock37: ;Main true block ;keep 
	; LineNumber: 459
	; LineNumber: 461
	; Assigning to register
	; Assigning register : _a
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; LineNumber: 462
	jsr $ffd2
	; LineNumber: 463
	; Test Inc dec D
	inc txt_next_ch
	; LineNumber: 464
	jmp txt_print_string_while36
txt_print_string_elsedoneblock39
txt_print_string_loopend41
	; LineNumber: 466
	
; //cursor_down();
	; Binary clause Simplified: NOTEQUALS
	lda txt_CRLF
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock47
txt_print_string_ConditionalTrueBlock45: ;Main true block ;keep 
	; LineNumber: 467
	; LineNumber: 468
	jsr txt_cursor_return
	; LineNumber: 470
txt_print_string_elsedoneblock47
	; LineNumber: 471
	rts
	;*
; //<p>Wait for the Vertical Blank to start. This is when the raster beam
; //has reached the bottom of the screen and is returning to the top left.
; 

	; NodeProcedureDecl -1
	; ***********  Defining procedure : Screen_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 19
Screen_WaitVblStart
	; LineNumber: 21
	; ****** Inline assembler section
	
waitVblStart
	lda $e840
	and #%00100000
	;cmp #%00100000
	beq waitVblStart
	
	; LineNumber: 31
	rts
	;*
; //<p>Wait for the Vertical Blank to end. This is after the raster beam
; //has returned to the top of the screen. This procedure will be true and
; //no wait while the screen is being redrawn.
; //<p>Use WaitVblEnd after a WaitVblStart when needing to ensure that the
; //vertical blank has completed before waiting for the next VBL. 
; //This is important when your game loop takes less time than the time for
; //the raster to return to the top of the screen.
; 

	; NodeProcedureDecl -1
	; ***********  Defining procedure : Screen_WaitVblEnd
	;    Procedure type : User-defined procedure
	; LineNumber: 43
Screen_WaitVblEnd
	; LineNumber: 45
	; ****** Inline assembler section
	
waitVblEnd
	lda $e840
	and #%00100000
	;cmp #%00100000
	bne waitVblEnd
	
	; LineNumber: 55
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 367
Key_Read
	; LineNumber: 369
	lda #$0
	; Calling storevariable on generic assign expression
	sta Key_keyState
	; LineNumber: 398
	
; // row to test
	; Calling storevariable on generic assign expression
	sta Key_temp
Key_Read_forloop53
	; LineNumber: 372
	; LineNumber: 374
	lda Key_temp
	; Calling storevariable on generic assign expression
	sta Key_KeyRow
	; LineNumber: 376
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 397
Key_Read_forloopcounter55
Key_Read_loopstart56
	; Compare is onpage
	; Test Inc dec D
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop53
Key_Read_loopdone60: ;keep
Key_Read_forloopend54
Key_Read_loopend57
	; LineNumber: 399
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 415
	; LineNumber: 414
Key_Pressed_block61
Key_Pressed
	; LineNumber: 417
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 425
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 62
init_screen
	; LineNumber: 63
	lda #<map
	ldx #>map
	sta map_p
	stx map_p+1
	; LineNumber: 63
	lda #$0
	ldx #0
init_screen_fill63
	sta screen_buffer,x
	inx
	cpx #$ff
	bne init_screen_fill63
	; LineNumber: 65
	; Copy full screen
	ldx #0
init_screen_fullcopyloop64
	lda screen_buffer + $0,x
	sta $8000 + $0,x
	lda screen_buffer + $100,x
	sta $8000 + $100,x
	lda screen_buffer + $200,x
	sta $8000 + $200,x
	dex
	bne init_screen_fullcopyloop64
	ldx #232
init_screen_fullcopyloop265
	lda screen_buffer + $2ff,x
	sta $8000 + $2ff,x
	dex
	bne init_screen_fullcopyloop265
	; LineNumber: 66
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 80
draw_screen
	; LineNumber: 82
	; INTEGER optimization: a=b+c 
	lda #<map
	clc
	adc sx
	sta map_p+0
	lda #>map
	adc sx+1
	sta map_p+1
	; LineNumber: 83
	lda #<screen_buffer
	ldx #>screen_buffer
	sta des
	stx des+1
	; LineNumber: 86
	
; // Semi-"Unrolled" for extra speed	
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy69
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy69
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd71
	inc des+1
draw_screen_WordAdd71
	; LineNumber: 76
	; LineNumber: 87
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy73
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy73
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd75
	inc des+1
draw_screen_WordAdd75
	; LineNumber: 76
	; LineNumber: 88
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy77
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy77
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd79
	inc des+1
draw_screen_WordAdd79
	; LineNumber: 76
	; LineNumber: 89
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy81
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy81
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd83
	inc des+1
draw_screen_WordAdd83
	; LineNumber: 76
	; LineNumber: 90
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy85
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy85
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd87
	inc des+1
draw_screen_WordAdd87
	; LineNumber: 76
	; LineNumber: 91
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy89
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy89
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd91
	inc des+1
draw_screen_WordAdd91
	; LineNumber: 76
	; LineNumber: 92
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy93
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy93
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd95
	inc des+1
draw_screen_WordAdd95
	; LineNumber: 76
	; LineNumber: 93
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy97
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy97
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd99
	inc des+1
draw_screen_WordAdd99
	; LineNumber: 76
	; LineNumber: 94
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy101
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy101
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd103
	inc des+1
draw_screen_WordAdd103
	; LineNumber: 76
	; LineNumber: 95
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy105
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy105
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd107
	inc des+1
draw_screen_WordAdd107
	; LineNumber: 76
	; LineNumber: 96
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy109
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy109
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd111
	inc des+1
draw_screen_WordAdd111
	; LineNumber: 76
	; LineNumber: 97
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy113
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy113
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd115
	inc des+1
draw_screen_WordAdd115
	; LineNumber: 76
	; LineNumber: 98
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy117
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy117
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd119
	inc des+1
draw_screen_WordAdd119
	; LineNumber: 76
	; LineNumber: 99
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy121
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy121
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd123
	inc des+1
draw_screen_WordAdd123
	; LineNumber: 76
	; LineNumber: 100
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy125
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy125
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd127
	inc des+1
draw_screen_WordAdd127
	; LineNumber: 76
	; LineNumber: 101
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy129
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy129
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd131
	inc des+1
draw_screen_WordAdd131
	; LineNumber: 76
	; LineNumber: 102
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy133
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy133
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd135
	inc des+1
draw_screen_WordAdd135
	; LineNumber: 76
	; LineNumber: 103
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy137
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy137
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd139
	inc des+1
draw_screen_WordAdd139
	; LineNumber: 76
	; LineNumber: 104
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy141
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy141
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd143
	inc des+1
draw_screen_WordAdd143
	; LineNumber: 76
	; LineNumber: 105
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy145
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy145
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd147
	inc des+1
draw_screen_WordAdd147
	; LineNumber: 76
	; LineNumber: 106
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy149
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy149
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd151
	inc des+1
draw_screen_WordAdd151
	; LineNumber: 76
	; LineNumber: 107
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy153
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy153
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd155
	inc des+1
draw_screen_WordAdd155
	; LineNumber: 76
	; LineNumber: 108
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy157
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy157
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd159
	inc des+1
draw_screen_WordAdd159
	; LineNumber: 76
	; LineNumber: 109
	; LineNumber: 70
	; LineNumber: 73
	; memcpyfast
	ldy #39
draw_screen_memcpy161
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy161
	; LineNumber: 74
	lda map_p
	clc
	adc #$90
	sta map_p+0
	lda map_p+1
	adc #$01
	sta map_p+1
	; LineNumber: 75
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd163
	inc des+1
draw_screen_WordAdd163
	; LineNumber: 76
	; LineNumber: 112
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_ship
	;    Procedure type : User-defined procedure
	; LineNumber: 118
draw_ship
	; LineNumber: 121
	; Generic 16 bit op
	ldy #0
	lda x
draw_ship_rightvarInteger_var167 =  $8A
	sta draw_ship_rightvarInteger_var167
	sty draw_ship_rightvarInteger_var167+1
	; Generic 16 bit op
	lda #<screen_buffer
	ldy #>screen_buffer
draw_ship_rightvarInteger_var170 =  $8C
	sta draw_ship_rightvarInteger_var170
	sty draw_ship_rightvarInteger_var170+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc draw_ship_rightvarInteger_var170
draw_ship_wordAdd168
	sta draw_ship_rightvarInteger_var170
	; High-bit binop
	tya
	adc draw_ship_rightvarInteger_var170+1
	tay
	lda draw_ship_rightvarInteger_var170
	; Low bit binop:
	clc
	adc draw_ship_rightvarInteger_var167
draw_ship_wordAdd165
	sta draw_ship_rightvarInteger_var167
	; High-bit binop
	tya
	adc draw_ship_rightvarInteger_var167+1
	tay
	lda draw_ship_rightvarInteger_var167
	sta sdes
	sty sdes+1
	; LineNumber: 123
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy #$5
	lda (sdes),y
	; Compare with pure num / var optimization
	cmp #$20;keep
	beq draw_ship_localfailed176
	jmp draw_ship_ConditionalTrueBlock172
draw_ship_localfailed176: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy #$2d
	lda (sdes),y
	; Compare with pure num / var optimization
	cmp #$20;keep
	beq draw_ship_elsedoneblock174
draw_ship_ConditionalTrueBlock172: ;Main true block ;keep 
	; LineNumber: 123
	; LineNumber: 125
	lda #$0
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 126
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 129
draw_ship_elsedoneblock174
	; LineNumber: 130
	; memcpy
	ldy #0
draw_ship_memcpy178
	lda ship+ $00,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy178
	; LineNumber: 132
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd179
	inc sdes+1
draw_ship_WordAdd179
	; LineNumber: 133
	; memcpy
	ldy #0
draw_ship_memcpy180
	lda ship+ $05,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy180
	; LineNumber: 134
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd181
	inc sdes+1
draw_ship_WordAdd181
	; LineNumber: 134
	; memcpy
	ldy #0
draw_ship_memcpy182
	lda ship+ $0a,y
	sta (sdes),y
	iny
	cpy #$5
	bne draw_ship_memcpy182
	; LineNumber: 138
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_frame
	;    Procedure type : User-defined procedure
	; LineNumber: 140
draw_frame
	; LineNumber: 143
	; Test Inc dec D
	inc ticks
	lda ticks
	cmp #$64 ; keep
	bne draw_frame_incmax184
	lda #$0
	sta ticks
draw_frame_incmax184
	; LineNumber: 147
	; Binary clause Simplified: EQUALS
	; Modulo
	lda #$5
draw_frame_val_var199 =  $8A
	sta draw_frame_val_var199
	lda ticks
	sec
draw_frame_modulo200
	sbc draw_frame_val_var199
	bcs draw_frame_modulo200
	adc draw_frame_val_var199
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne draw_frame_elsedoneblock188
draw_frame_ConditionalTrueBlock186: ;Main true block ;keep 
	; LineNumber: 146
	; LineNumber: 150
	
; // This will run approx 60hz so we need to figure out vertical blank
; // Bit 5 is high when vertical retrace in effect
; //incrange(sx,0,400);
	lda sx
	clc
	adc #$01
	sta sx+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_frame_WordAdd202
	inc sx+1
draw_frame_WordAdd202
	; LineNumber: 151
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda sx+1   ; compare high bytes
	cmp #$01 ;keep
	bne draw_frame_elsedoneblock206
	lda sx
	cmp #$90 ;keep
	bne draw_frame_elsedoneblock206
	jmp draw_frame_ConditionalTrueBlock204
draw_frame_ConditionalTrueBlock204: ;Main true block ;keep 
	; LineNumber: 150
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta sx
	sty sx+1
draw_frame_elsedoneblock206
	; LineNumber: 153
	jsr draw_screen
	; LineNumber: 154
	jsr draw_ship
	; LineNumber: 154
	; Copy full screen
	ldx #0
draw_frame_fullcopyloop209
	lda screen_buffer + $0,x
	sta $8000 + $0,x
	lda screen_buffer + $100,x
	sta $8000 + $100,x
	lda screen_buffer + $200,x
	sta $8000 + $200,x
	dex
	bne draw_frame_fullcopyloop209
	ldx #232
draw_frame_fullcopyloop2210
	lda screen_buffer + $2ff,x
	sta $8000 + $2ff,x
	dex
	bne draw_frame_fullcopyloop2210
	; LineNumber: 156
draw_frame_elsedoneblock188
	; LineNumber: 159
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : start_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 180
start_screen
	; LineNumber: 182
	jsr txt_cls
	; LineNumber: 183
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 184
	; Assigning a string : txt_in_str
	lda #<start_screen_stringassignstr212
	sta txt_in_str
	lda #>start_screen_stringassignstr212
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 186
	jsr txt_clear_buffer
	; LineNumber: 187
	jsr txt_wait_key
	; LineNumber: 189
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : end_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 192
end_screen
	; LineNumber: 194
	; Binary clause Simplified: NOTEQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq end_screen_elseblock217
end_screen_ConditionalTrueBlock216: ;Main true block ;keep 
	; LineNumber: 195
	; LineNumber: 197
	jsr txt_cls
	; LineNumber: 198
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 199
	; Assigning a string : txt_in_str
	lda #<end_screen_stringassignstr226
	sta txt_in_str
	lda #>end_screen_stringassignstr226
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 202
	jmp end_screen_elsedoneblock218
end_screen_elseblock217
	; LineNumber: 203
	; LineNumber: 205
	jsr txt_cls
	; LineNumber: 206
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 207
	; Assigning a string : txt_in_str
	lda #<end_screen_stringassignstr229
	sta txt_in_str
	lda #>end_screen_stringassignstr229
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 210
end_screen_elsedoneblock218
	; LineNumber: 212
	jsr txt_clear_buffer
	; LineNumber: 213
	jsr txt_wait_key
	; LineNumber: 215
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_game
	;    Procedure type : User-defined procedure
	; LineNumber: 218
init_game
	; LineNumber: 220
	jsr init_screen
	; LineNumber: 221
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta sx
	sty sx+1
	; LineNumber: 222
	lda #$4
	; Calling storevariable on generic assign expression
	sta sy
	sty sy+1
	; LineNumber: 223
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	; LineNumber: 224
	lda #$a
	; Calling storevariable on generic assign expression
	sta y
	; LineNumber: 230
	
; // The screen updates but no keyboard so disable
; //setup_irq();
	lda #$1
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 231
	lda #$0
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 235
	
; // Numeric Keypad
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable on generic assign expression
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 236
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 237
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 238
	; Integer constant assigning
	ldy #$80
	; Calling storevariable on generic assign expression
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 241
	
; // Regular keys        
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable on generic assign expression
	sta key_up
	sty key_up+1
	; LineNumber: 242
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta key_down
	sty key_down+1
	; LineNumber: 243
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta key_left
	sty key_left+1
	; LineNumber: 244
	; Integer constant assigning
	ldy #$02
	; Calling storevariable on generic assign expression
	sta key_right
	sty key_right+1
	; LineNumber: 246
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : main_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 249
main_loop
	; LineNumber: 254
	
; // Andy's keyboard routine
; // doesn't work with IRQ :(
	jsr Key_Read
	; LineNumber: 257
	lda x
	; Calling storevariable on generic assign expression
	sta old_x
	; LineNumber: 258
	lda y
	; Calling storevariable on generic assign expression
	sta old_y
	; LineNumber: 259
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed260
	jmp main_loop_ConditionalTrueBlock234
main_loop_localfailed260: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock236
main_loop_ConditionalTrueBlock234: ;Main true block ;keep 
	; LineNumber: 260
	; LineNumber: 261
	; Binary clause Simplified: GREATEREQUAL
	lda y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc main_loop_elsedoneblock265
main_loop_ConditionalTrueBlock263: ;Main true block ;keep 
	; LineNumber: 262
	; LineNumber: 263
	; Test Inc dec D
	dec y
	; LineNumber: 264
	; Binary clause Simplified: LESS
	lda y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcs main_loop_elsedoneblock279
main_loop_ConditionalTrueBlock277: ;Main true block ;keep 
	; LineNumber: 263
	lda sy
	sec
	sbc #$01
	sta sy+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcs main_loop_WordAdd283
	dec sy+1
main_loop_WordAdd283
main_loop_elsedoneblock279
	; LineNumber: 265
main_loop_elsedoneblock265
	; LineNumber: 266
main_loop_elsedoneblock236
	; LineNumber: 268
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed295
	jmp main_loop_ConditionalTrueBlock285
main_loop_localfailed295: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock287
main_loop_ConditionalTrueBlock285: ;Main true block ;keep 
	; LineNumber: 269
	; LineNumber: 270
	; Binary clause Simplified: LESS
	lda x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs main_loop_elsedoneblock300
main_loop_ConditionalTrueBlock298: ;Main true block ;keep 
	; LineNumber: 271
	; LineNumber: 272
	; Test Inc dec D
	inc x
	; LineNumber: 273
main_loop_elsedoneblock300
	; LineNumber: 274
main_loop_elsedoneblock287
	; LineNumber: 276
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed330
	jmp main_loop_ConditionalTrueBlock304
main_loop_localfailed330: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock306
main_loop_ConditionalTrueBlock304: ;Main true block ;keep 
	; LineNumber: 277
	; LineNumber: 278
	; Binary clause Simplified: LESS
	lda y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs main_loop_elsedoneblock335
main_loop_ConditionalTrueBlock333: ;Main true block ;keep 
	; LineNumber: 279
	; LineNumber: 280
	; Test Inc dec D
	inc y
	; LineNumber: 281
	; Binary clause Simplified: GREATEREQUAL
	lda y
	; Compare with pure num / var optimization
	cmp #$10;keep
	bcc main_loop_elsedoneblock349
main_loop_ConditionalTrueBlock347: ;Main true block ;keep 
	; LineNumber: 280
	lda sy
	clc
	adc #$01
	sta sy+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc main_loop_WordAdd353
	inc sy+1
main_loop_WordAdd353
main_loop_elsedoneblock349
	; LineNumber: 282
main_loop_elsedoneblock335
	; LineNumber: 283
main_loop_elsedoneblock306
	; LineNumber: 284
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed365
	jmp main_loop_ConditionalTrueBlock355
main_loop_localfailed365: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock357
main_loop_ConditionalTrueBlock355: ;Main true block ;keep 
	; LineNumber: 285
	; LineNumber: 286
	; Binary clause Simplified: GREATEREQUAL
	lda x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc main_loop_elsedoneblock370
main_loop_ConditionalTrueBlock368: ;Main true block ;keep 
	; LineNumber: 287
	; LineNumber: 288
	; Test Inc dec D
	dec x
	; LineNumber: 289
main_loop_elsedoneblock370
	; LineNumber: 290
main_loop_elsedoneblock357
	; LineNumber: 294
	
; // until the IRQ works will need to update screen here
	jsr Screen_WaitVblStart
	; LineNumber: 295
	jsr draw_frame
	; LineNumber: 296
	jsr Screen_WaitVblEnd
	; LineNumber: 297
	rts
block1
	; LineNumber: 302
MainProgram_while373
MainProgram_loopstart377
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock376
MainProgram_ConditionalTrueBlock374: ;Main true block ;keep 
	; LineNumber: 302
	; LineNumber: 304
	; main program 
	jsr init_game
	; LineNumber: 305
	jsr start_screen
	; LineNumber: 307
MainProgram_while390
MainProgram_loopstart394
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock393
MainProgram_localsuccess397: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne MainProgram_elsedoneblock393
MainProgram_ConditionalTrueBlock391: ;Main true block ;keep 
	; LineNumber: 308
	; LineNumber: 311
	
; // where the magic happens	
	jsr main_loop
	; LineNumber: 313
	jmp MainProgram_while390
MainProgram_elsedoneblock393
MainProgram_loopend395
	; LineNumber: 315
	jsr end_screen
	; LineNumber: 317
	jmp MainProgram_while373
MainProgram_elsedoneblock376
MainProgram_loopend378
	; LineNumber: 318
	; End of program
	; Ending memory block
EndBlock410
start_screen_stringassignstr212	.dc "PET-TYPE 2021",0
end_screen_stringassignstr226	.dc "YOU WIN!",0
end_screen_stringassignstr229	.dc "YOU LOSE!",0
