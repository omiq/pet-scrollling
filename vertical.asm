 processor 6502
	org $401
	; Starting new memory block at $401
StartBlock401
	.byte $b ; lo byte of next line
	.byte $4 ; hi byte of next line
	.byte $0a, $00 ; line 10 (lo, hi)
	.byte $9e, $20 ; SYS token and a space
	.byte   $31,$30,$34,$30
	.byte $00, $00, $00 ; end of program
	; Ending memory block
EndBlock401
	org $410
	; Starting new memory block at $410
StartBlock410
horizontal
	; LineNumber: 468
	jmp block1
	; LineNumber: 5
txt_temp_address_p	= $68
	; LineNumber: 6
txt_ytab	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w $00, $00, $00, $00, $00, $00, $00, $00
	dc.w 0
	; LineNumber: 4
Interrupts_interruptFlag = $e813
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 13
i	dc.b	0
	; LineNumber: 13
ALIVE	dc.b	0
	; LineNumber: 13
WON_GAME	dc.b	0
	; LineNumber: 14
x	dc.b	0
	; LineNumber: 14
y	dc.b	0
	; LineNumber: 14
old_x	dc.b	0
	; LineNumber: 14
old_y	dc.b	0
	; LineNumber: 15
sx	dc.w	0
	; LineNumber: 15
sy	dc.w	0
	; LineNumber: 18
des	= $6A
	; LineNumber: 18
map_p	= $6C
	; LineNumber: 19
n_key_up	dc.w	0
	; LineNumber: 19
n_key_down	dc.w	0
	; LineNumber: 19
n_key_left	dc.w	0
	; LineNumber: 19
n_key_right	dc.w	0
	; LineNumber: 19
key_up	dc.w	0
	; LineNumber: 19
key_down	dc.w	0
	; LineNumber: 19
key_left	dc.w	0
	; LineNumber: 19
key_right	dc.w	0
	; LineNumber: 23
sdes	= $6E
	; LineNumber: 24
ship	
	dc.b	32, 32, 233, 223, 32, 32, 233, 218, 218
	dc.b	223, 32, 105, 95, 105, 95, 0
	; LineNumber: 33
map	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0ec, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $0fc, $07c, $0a0, $0a0, $0a0, $0fc, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0fe, $0fe, $0fc, $0a0, $0a0, $0a0, $061, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0ff, $0a0, $0a0, $0ec, $0e1
	dc.b $0fe, $0fe, $0a0, $0a0, $020, $0fc, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $061, $0fe, $0fe, $0a0, $0ec, $06c, $0ff
	dc.b $0fe, $07b, $0ff, $07b, $062, $0fe, $0fe, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0ec, $07b, $0ff, $0fe, $07e, $020, $07b, $0ff
	dc.b $07b, $0ff, $07b, $0fe, $0fe, $0a0, $0fe, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0ec, $07b, $0ff, $07b, $07b, $07b, $0fe, $0ff
	dc.b $0ff, $0ff, $0fe, $0ff, $0fe, $0fe, $061, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $07b, $0ff, $0ff, $07b, $062, $0a0, $0fe, $0fe
	dc.b $0ff, $0ff, $0ff, $0fe, $0ff, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0ff, $07b, $0ff, $07b, $0ec, $0fe, $0fe, $0fe
	dc.b $07b, $020, $0e1, $0fe, $0a0, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0ff, $0ff, $062, $0fe, $062, $062, $062, $0fe
	dc.b $0fe, $062, $0ff, $0fe, $0ff, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0e1, $0fe, $0a0, $0a0, $0a0, $0fe, $0fe, $0fe
	dc.b $0a0, $0ec, $0fe, $07c, $020, $020, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0ff, $0ff, $0fe, $0ec, $0ff, $0ff, $0fe, $0fe
	dc.b $07b, $0ff, $020, $020, $020, $020, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0fe, $0fe, $0a0, $061, $020, $0fe, $0a0, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $062, $0ff, $0fe, $07e, $020, $020, $0e1, $062
	dc.b $020, $020, $020, $020, $020, $020, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $020, $020, $0a0, $0fe
	dc.b $061, $020, $020, $020, $020, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $062, $07b, $020, $020, $020, $0ff, $0fe, $0ff
	dc.b $020, $020, $06c, $062, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $020, $020, $07c, $0ff, $0ff, $020
	dc.b $020, $020, $0a0, $0fe, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $07b, $020, $020, $0ff, $0ff, $020, $020
	dc.b $07b, $0fe, $0ff, $0fe, $061, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ff, $020, $020, $020, $07b, $020, $020, $0ff
	dc.b $0ff, $0ff, $0fe, $0fe, $061, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $07b, $020, $0ff
	dc.b $07b, $0ff, $0fe, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $07b, $020, $020, $020, $07b, $07b
	dc.b $07b, $0ff, $0fe, $0fe, $0a0, $0fe, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07b, $0fe, $0fe, $0fe, $0fe, $0ec, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $0ff, $0ff, $0ff, $0ff, $07b, $062, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $0ff, $07b, $0ff, $07b, $0fe, $0fe, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $07b, $0ff, $0fe, $0a0, $0ff, $0fe, $0ec
	dc.b $06c, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ec
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0ff, $0fe, $0a0, $0fe, $0ec, $07b, $062
	dc.b $0fe, $0a0, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $06c, $0a0, $07b, $06c
	dc.b $07e, $020, $0fe, $0fe, $061, $07b, $07b, $0fe
	dc.b $0a0, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $06c, $0a0, $0fe, $0a0, $062, $020
	dc.b $020, $06c, $0a0, $0fe, $07b, $07b, $07b, $0fe
	dc.b $0ff, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $0fe, $0fe, $0fc, $0fe, $0a0, $062
	dc.b $020, $0fe, $0a0, $0ec, $0fe, $07b, $07b, $0ff
	dc.b $0ff, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $0ff, $0fe, $0ff, $0a0, $0ff, $0fe
	dc.b $0ff, $0fe, $0ff, $0ff, $0ff, $07b, $07b, $0ff
	dc.b $0ff, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $07b, $0ff, $0fe, $0ff, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $0ff, $07b, $07b, $07b
	dc.b $0ff, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0a0, $0a0, $0a0, $0a0
	dc.b $07b, $0ff, $07b, $0ff, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0fe, $0ff, $0a0
	dc.b $07b, $020, $0ff, $07b, $0fe, $0ff, $0ff, $0ff
	dc.b $0ff, $07b, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $062, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ff, $0fe, $0fe
	dc.b $020, $07c, $07b, $0ff, $0ff, $0ff, $07b, $0ff
	dc.b $0ff, $0ff, $07b, $07b, $020, $07b, $020, $07b
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $062, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0ff, $0ff
	dc.b $020, $07b, $07b, $0ff, $0fe, $0ff, $0ff, $07b
	dc.b $0ff, $07b, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $0a0, $0fe, $0a0
	dc.b $0a0, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0ff
	dc.b $020, $07b, $020, $0fe, $0fe, $07b, $07b, $07b
	dc.b $0ff, $07b, $07b, $07b, $020, $0fe, $0fc, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0fe, $0a0, $0a0, $0ec, $0a0, $0a0, $0fe
	dc.b $0a0, $0ff, $0ff, $0a0, $0fe, $0a0, $0a0, $0fc
	dc.b $07b, $020, $0fe, $0a0, $0ff, $07b, $0ff, $07b
	dc.b $07b, $07b, $0ff, $07b, $07b, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0fe, $0ec, $0a0
	dc.b $0a0, $061, $0ff, $0ff, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $0ff, $0fe, $07b, $07b, $07b, $07b
	dc.b $020, $07b, $07b, $0fe, $0fc, $0e1, $0ff, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $07b, $07b, $07c, $0fb, $0a0, $0a0
	dc.b $07b, $07c, $0fe, $0ff, $07b, $07b, $07b, $07b
	dc.b $07b, $0fe, $0a0, $0a0, $0a0, $07b, $0fe, $0ff
	dc.b $020, $020, $020, $020, $020, $020, $020, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ff, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $07b, $07b, $020, $0e1, $0a0
	dc.b $020, $0ff, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $07b, $0a0, $0fe, $0a0, $0fe, $07b, $0ff, $0ff
	dc.b $07b, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $0ff, $0ff, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $062, $020, $020, $0a0
	dc.b $020, $07b, $0ff, $020, $07b, $07b, $07b, $0a0
	dc.b $0a0, $0fe, $0fe, $0fe, $0fe, $07b, $0ff, $0ff
	dc.b $07b, $020, $020, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0ff, $0a0, $0a0, $0ff, $0ff, $07b
	dc.b $07b, $0ec, $062, $0a0, $0ec, $020, $020, $020
	dc.b $020, $07b, $020, $07b, $07b, $07b, $07b, $0fe
	dc.b $0fe, $0a0, $0ff, $0ff, $0ff, $0ff, $0ff, $0ff
	dc.b $07b, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0ec, $061, $0ff, $0a0, $0fe, $062, $07b
	dc.b $07b, $07b, $07c, $0fe, $061, $0e1, $07b, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $0fe, $0a0, $0fe
	dc.b $0fe, $0fe, $0fe, $0ff, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $020, $020, $020, $020, $06c, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0fe, $0e1, $0ec, $0fe, $0a0
	dc.b $0ff, $07b, $07b, $07c, $061, $07c, $0fe, $07b
	dc.b $020, $07b, $07b, $07b, $0e1, $0a0, $0fe, $0ff
	dc.b $0ff, $0fe, $0ff, $0ff, $07b, $0ff, $07b, $0ff
	dc.b $0ff, $020, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $0fc, $0a0, $0fe, $0fe, $0e1, $0ec, $0ff, $0fe
	dc.b $07b, $020, $020, $020, $020, $0ff, $07c, $0fe
	dc.b $07b, $07b, $07b, $020, $0ff, $0fe, $0fe, $0fe
	dc.b $0fe, $0ff, $0ff, $0ff, $0ff, $0ff, $0fe, $0ff
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fe, $0ff, $0ec, $0fe, $0ff
	dc.b $0fe, $020, $07b, $020, $020, $020, $0fe, $0ff
	dc.b $07b, $020, $020, $0ff, $0ff, $0fe, $0ff, $0fe
	dc.b $0ec, $0ff, $0ff, $07b, $0ff, $0fe, $0fe, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0ff, $0fe, $020, $0ec, $0ff, $0ff
	dc.b $07b, $0ff, $0ff, $07b, $020, $020, $0fe, $0ff
	dc.b $020, $020, $0fe, $0fe, $0ff, $0fe, $0ff, $0ff
	dc.b $0ff, $0ff, $0fe, $07b, $0fe, $0fe, $0fe, $061
	dc.b $020, $020, $020, $020, $020, $020, $0e1, $0fb
	dc.b $0a0, $0ec, $0ff, $0ff, $0fe, $0ff, $0ff, $0ff
	dc.b $07b, $0ff, $0ff, $020, $07b, $020, $07c, $0ff
	dc.b $06c, $0fe, $0fe, $0fe, $07b, $07b, $0ff, $0ff
	dc.b $0ff, $0fe, $07b, $0ff, $0ff, $0ff, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $0ff, $0a0
	dc.b $0a0, $0fc, $0ff, $0ff, $07b, $0ff, $07b, $0fe
	dc.b $07b, $07b, $07b, $0e1, $07b, $020, $020, $0e1
	dc.b $0fe, $0fe, $0ec, $0fe, $0ff, $07b, $0ec, $07b
	dc.b $0ff, $020, $07b, $0ff, $0ff, $0ff, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e2
	dc.b $07f, $07e, $07b, $07b, $0ff, $07b, $07b, $0ff
	dc.b $07b, $07b, $07b, $0e1, $0fe, $07b, $020, $07c
	dc.b $0fe, $0ff, $07b, $0fe, $0fe, $0ff, $07b, $020
	dc.b $020, $020, $020, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $07e
	dc.b $0e2, $07b, $020, $07b, $07b, $07b, $07b, $0fe
	dc.b $062, $07b, $020, $0e1, $0fe, $061, $07b, $020
	dc.b $0ec, $0ff, $0ff, $07b, $0ff, $0ff, $020, $020
	dc.b $020, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $07f, $0ec, $07b, $0ff, $0fe, $0ff, $0fe, $0fe
	dc.b $0a0, $061, $020, $0e1, $0a0, $07b, $020, $020
	dc.b $0ff, $07b, $07b, $07b, $07c, $07b, $020, $020
	dc.b $07b, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fe, $020, $0fe, $0fe, $020, $0fe, $0fe
	dc.b $0fe, $0fc, $020, $07c, $0ff, $020, $020, $020
	dc.b $0a0, $07b, $020, $07b, $07b, $020, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $020, $0e1, $0fe, $0fe, $0e1, $0a0, $0fe
	dc.b $0fe, $07b, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07b, $020, $07b, $062, $062, $0ff, $0fe
	dc.b $07b, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0fe, $0ff, $0fe, $0fe, $0ec
	dc.b $0ff, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $07b, $0fe, $0a0, $0ff, $0fe, $07b
	dc.b $0ff, $0ff, $0a0, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $0e1, $0ff, $0fe, $0fe, $0ec, $0ff
	dc.b $0fe, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $0fe, $0fe, $0ff, $07c, $0ff, $07b, $0ff
	dc.b $07b, $0ff, $0ff, $0a0, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $0ff, $0ff, $0fe, $0a0, $020, $07c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0fe, $07b, $020, $0ff, $07b
	dc.b $0ff, $07c, $0fe, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $0a0, $0a0, $0ff, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $06c
	dc.b $0a0, $0a0, $0a0, $0ff, $07b, $020, $020, $07b
	dc.b $020, $07b, $07c, $0fe, $0a0, $0fc, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0ff, $0fe, $0ff, $062, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $07b, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $020, $020, $020, $020
	dc.b $06c, $020, $07b, $0e1, $0fe, $0a0, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $0ec, $0ff, $0fe, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0fc, $020, $020, $020
	dc.b $0ff, $0ff, $07b, $07b, $06c, $0a0, $061, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $0ff, $0ff, $07b, $020, $020, $020
	dc.b $020, $020, $020, $06c, $062, $0fb, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $06c, $0fe
	dc.b $0fe, $0ff, $0ff, $0ff, $07b, $0a0, $0a0, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0ff, $0fe, $062, $020, $020
	dc.b $020, $020, $020, $0a0, $0a0, $0ec, $0fe, $0ff
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $0ec, $0ff, $0fe
	dc.b $0ff, $0fe, $0fe, $0ff, $0ff, $0ff, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0ff, $0fe, $0ec, $020, $020
	dc.b $020, $020, $020, $07c, $0ff, $0fe, $07c, $0ff
	dc.b $0a0, $0a0, $0a0, $0ec, $0fe, $0ff, $0fe, $0fe
	dc.b $020, $07c, $061, $0a0, $0fe, $0ff, $0fe, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $07b, $020, $020, $020
	dc.b $020, $0fe, $0a0, $07b, $0fe, $0ff, $020, $07c
	dc.b $0a0, $0a0, $0fc, $0ff, $0ff, $0fe, $0a0, $0a0
	dc.b $062, $020, $020, $07c, $061, $0ff, $0fe, $0a0
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $07b, $020, $020, $020
	dc.b $020, $0fb, $0fe, $062, $020, $0ff, $07b, $020
	dc.b $0a0, $0a0, $0a0, $0ff, $0ff, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $07b, $07b, $0fe, $062, $0a0, $0a0
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $07b, $020, $020, $020
	dc.b $020, $020, $0fb, $0ff, $07b, $020, $07b, $07b
	dc.b $0a0, $0a0, $0ec, $0fe, $07b, $0a0, $0a0, $0fe
	dc.b $0fe, $0a0, $061, $07b, $07b, $0ff, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $07b, $020, $020
	dc.b $020, $020, $07c, $0ff, $0ff, $020, $020, $020
	dc.b $0fc, $0ff, $0fe, $0fe, $0fc, $0fe, $0a0, $0ec
	dc.b $0fe, $0ec, $0ff, $07b, $0ff, $07b, $0ff, $0a0
	dc.b $0a0, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $07b, $020
	dc.b $020, $020, $020, $020, $07b, $07b, $020, $020
	dc.b $0fe, $0fe, $0ff, $0a0, $0ff, $0fe, $0fe, $0ff
	dc.b $0ff, $0ec, $07b, $0ff, $07c, $0ff, $0ff, $0fe
	dc.b $0fe, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $07b, $020
	dc.b $020, $020, $020, $020, $020, $07b, $020, $020
	dc.b $0a0, $0fe, $0ff, $0ff, $0ff, $0fe, $061, $07c
	dc.b $0ff, $0ff, $0fe, $020, $07c, $0ff, $0a0, $0fe
	dc.b $0a0, $0a0, $07b, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $0fe, $0fe, $07b, $020, $0ff, $07b, $0ff
	dc.b $07b, $0fe, $0ff, $020, $020, $0ff, $0ff, $0fe
	dc.b $0fe, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $062, $020, $06c, $0a0, $020, $07b, $020, $020
	dc.b $0ff, $0ff, $0ff, $020, $020, $07b, $0ff, $07b
	dc.b $07b, $0fe, $0fe, $020, $0ff, $0ff, $0ff, $0ff
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $07b, $07c, $0ec, $020, $07b, $07b, $020
	dc.b $07b, $0ff, $020, $020, $0ff, $07b, $07b, $0ff
	dc.b $062, $0a0, $020, $07b, $07b, $0ff, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0fe, $020, $07b, $020, $020
	dc.b $0ff, $020, $020, $020, $0fe, $07b, $0e1, $0fe
	dc.b $0ec, $020, $07b, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0fe, $07b, $020, $020, $020
	dc.b $0ff, $020, $020, $07b, $07c, $020, $07c, $07c
	dc.b $020, $020, $020, $020, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07b, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $020, $062, $0a0, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0ff, $0fe, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $07b, $07b, $0a0, $0fe, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0ff, $07b, $07b, $020, $020
	dc.b $020, $0ff, $020, $020, $020, $020, $0ff, $0ff
	dc.b $0ff, $07b, $07b, $0ff, $0fe, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07b, $020, $07b, $020
	dc.b $020, $020, $020, $020, $020, $07b, $07b, $0ff
	dc.b $07b, $07b, $07c, $0ff, $0ff, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07b, $020, $020, $06c
	dc.b $020, $06c, $07b, $020, $0ff, $07b, $0ff, $07b
	dc.b $0ff, $020, $0ff, $0ff, $020, $020, $020, $0fe
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $07b, $020, $020
	dc.b $07c, $07e, $07e, $020, $020, $0fe, $0fe, $0fe
	dc.b $020, $07b, $020, $020, $020, $020, $0fe, $0fe
	dc.b $0fe, $0a0, $07b, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0fc, $020, $020
	dc.b $07e, $07e, $06c, $020, $062, $0fe, $0a0, $0a0
	dc.b $061, $020, $0fe, $07b, $020, $07c, $0fe, $0ff
	dc.b $0fe, $0fe, $07e, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $07b, $020
	dc.b $07f, $07e, $0fb, $07f, $0e1, $0fb, $07e, $07c
	dc.b $020, $062, $0ff, $0fe, $020, $0ff, $0ff, $0fe
	dc.b $0fe, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $07b, $020
	dc.b $07f, $0fb, $07f, $07f, $07f, $07e, $020, $07e
	dc.b $0ff, $0ff, $0fe, $07b, $0ff, $07b, $0ff, $0fe
	dc.b $0ff, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $061, $020
	dc.b $0fb, $0fb, $0fb, $07f, $0fb, $07e, $07e, $0e2
	dc.b $07b, $0ff, $0ff, $020, $020, $0fe, $0ff, $0fe
	dc.b $0ff, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $07b
	dc.b $07f, $0fb, $07f, $0fb, $07f, $07e, $07e, $07e
	dc.b $0ff, $0ff, $020, $020, $0ff, $0ff, $0fe, $0fe
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $020
	dc.b $0fb, $07f, $0fb, $07f, $07f, $07e, $07f, $07e
	dc.b $07b, $020, $020, $020, $0e1, $0ff, $0ff, $06c
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0e1
	dc.b $07f, $0fb, $07e, $07f, $07f, $07f, $07f, $07e
	dc.b $020, $07e, $020, $06c, $07f, $0e2, $062, $0fe
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0fe
	dc.b $07f, $0e2, $07e, $07e, $0fb, $07f, $07f, $07e
	dc.b $07e, $07e, $0fb, $07f, $0fb, $07f, $07c, $0e1
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0ff
	dc.b $07e, $07f, $020, $0e1, $07e, $0fb, $07e, $07e
	dc.b $07e, $07e, $07e, $07f, $07f, $07f, $07e, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $07f, $07e, $0fb, $07e, $06c, $07e, $07f, $020
	dc.b $07f, $07e, $07e, $07e, $07f, $07f, $07f, $020
	dc.b $07e, $020, $06c, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $061, $0ff, $0ff, $07b, $020, $07e, $020, $0fb
	dc.b $07e, $020, $020, $020, $06c, $07e, $07e, $07f
	dc.b $07e, $020, $07e, $07e, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $07b, $0ff, $07b, $020, $06c, $07e, $0fb, $07f
	dc.b $0fb, $07f, $0a0, $07e, $0fb, $07e, $07e, $07f
	dc.b $0fb, $07e, $07e, $07e, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $07c, $020, $020, $020, $07e, $062, $07f
	dc.b $07e, $0fb, $0fb, $07e, $020, $07e, $020, $07e
	dc.b $07e, $07f, $07e, $07e, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $062, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $07c, $07e
	dc.b $07e, $07f, $0fb, $07e, $07f, $06c, $07f, $020
	dc.b $07f, $07e, $07e, $07e, $07f, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $0ff, $0ff, $0ff, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07e
	dc.b $07e, $07e, $07e, $07f, $07e, $07e, $07e, $0fb
	dc.b $0fb, $07e, $020, $020, $07e, $07e, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0ec, $0ff, $0ff, $0ff, $0fe, $07b
	dc.b $020, $020, $020, $020, $020, $020, $07b, $020
	dc.b $07f, $020, $07e, $07f, $07e, $07f, $020, $0fb
	dc.b $0fb, $07e, $020, $020, $07e, $07e, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $0ff, $0ff, $062, $07b, $07b, $0ff, $07b
	dc.b $020, $020, $020, $020, $062, $0fe, $020, $07c
	dc.b $07e, $020, $07e, $07f, $020, $07e, $020, $0fb
	dc.b $07f, $07f, $020, $06c, $07e, $07e, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $0ff, $0ec, $07b, $0ff, $07b
	dc.b $020, $020, $07b, $0ff, $0ff, $0ff, $020, $020
	dc.b $020, $062, $07e, $020, $020, $07b, $07b, $062
	dc.b $0fb, $0fb, $07f, $07f, $07f, $07e, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0ff, $0ff, $07b, $0ff, $07b, $0ff, $07b, $07b
	dc.b $020, $020, $0ff, $0ff, $0ff, $07b, $020, $020
	dc.b $0ff, $020, $07e, $020, $07b, $07b, $062, $0fe
	dc.b $07f, $07f, $020, $07f, $020, $07e, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0a0, $0fe
	dc.b $0ff, $07b, $0ff, $0ff, $0fe, $0ff, $0ff, $0ff
	dc.b $020, $07b, $07b, $0fe, $020, $020, $020, $0ff
	dc.b $020, $020, $020, $07b, $020, $0fe, $0ff, $0fe
	dc.b $0fb, $07e, $07f, $07f, $07e, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $07b
	dc.b $020, $07b, $07b, $0ff, $0ff, $020, $0ff, $0fe
	dc.b $020, $07b, $0ff, $020, $020, $06c, $0ff, $020
	dc.b $020, $020, $07b, $07b, $020, $0fe, $0e2, $020
	dc.b $020, $07e, $020, $020, $07e, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $062, $0ff, $07b
	dc.b $07b, $020, $0fe, $0ff, $0fe, $06c, $0ff, $0a0
	dc.b $020, $020, $07b, $020, $07c, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $07e, $0e2, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0a0, $061
	dc.b $020, $020, $0fe, $0fe, $0fe, $0a0, $0e1, $0fe
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $07e, $020, $07e, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0a0, $020
	dc.b $07b, $07b, $0a0, $0fe, $0a0, $0ec, $0ff, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07c, $07e, $07e, $07e, $07f, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0a0, $0fe
	dc.b $07b, $0fe, $0fe, $0fe, $0ff, $0ff, $0ff, $0ff
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fe, $06c, $07e, $0fb, $07e, $07e, $07e, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ec, $0a0
	dc.b $0a0, $0fe, $0fe, $0a0, $0ec, $0e1, $0fe, $0fe
	dc.b $020, $020, $020, $020, $020, $07b, $0fe, $0e1
	dc.b $07f, $07e, $07f, $07f, $07e, $07e, $061, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ec, $0fe
	dc.b $0fe, $0fe, $0ff, $0fe, $0fe, $0a0, $0fe, $0ec
	dc.b $020, $020, $020, $07b, $07b, $06c, $07f, $07f
	dc.b $07f, $07e, $06c, $061, $07b, $061, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $020, $0fe
	dc.b $0a0, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0, $0fe
	dc.b $020, $07b, $07b, $07b, $0fc, $0fb, $0a0, $07f
	dc.b $07f, $0fc, $0a0, $061, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0fe, $0fe
	dc.b $0ff, $0fe, $0fe, $07c, $07c, $020, $0fe, $0fe
	dc.b $0a0, $0ff, $0e1, $0a0, $0fb, $0a0, $07f, $0a0
	dc.b $0a0, $0a0, $0a0, $061, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0a0, $0fe
	dc.b $0ff, $0ff, $020, $020, $062, $07b, $0fe, $0fe
	dc.b $0fe, $0e1, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0fc, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0ff, $0ff, $020, $0e1, $0fe, $0fe, $0ff, $0fe
	dc.b $020, $0fb, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0fc, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0fe, $0ff, $020, $0fe, $0a0, $0fe, $0fe, $0fe
	dc.b $07e, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0fe, $07b, $020, $0fe, $0ff, $0fe, $0fe, $0fe
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $062
	dc.b $0fe, $0a0, $0a0, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0a0, $07b, $020, $0fe, $0fe, $0ff, $0a0, $0ec
	dc.b $0a0, $0a0, $0a0, $0ec, $0a0, $0a0, $07e, $0fe
	dc.b $0ff, $0fe, $0a0, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $062, $020, $0a0, $0fe, $07e, $0fe, $0fc
	dc.b $0a0, $0a0, $0ec, $0fe, $0a0, $0a0, $07b, $07c
	dc.b $0fe, $0ff, $0a0, $0ff, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $07b, $0a0, $0a0, $020, $0a0, $0fe
	dc.b $0ff, $0a0, $07b, $0fe, $0ff, $0fe, $020, $020
	dc.b $0ff, $0ff, $0ff, $0fe, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $07c, $0fe, $0a0, $0fe, $0fe
	dc.b $0fe, $07b, $0ff, $0ff, $0fe, $07b, $0fe, $0fe
	dc.b $0ff, $07b, $0fe, $0a0, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $062, $0fb, $0ff, $0fe, $0ff
	dc.b $0ff, $0ff, $07b, $0ec, $07b, $0ff, $0fe, $0a0
	dc.b $07b, $0ff, $0ff, $0fe, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $062, $07c, $07b, $0fe
	dc.b $0fe, $07b, $0ff, $0fe, $0ec, $0ff, $0a0, $0fe
	dc.b $020, $0ff, $0fe, $0ff, $061, $0ff, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $07b, $07b, $0e1
	dc.b $0ff, $0ff, $07b, $0ff, $07b, $0ff, $0ff, $0ff
	dc.b $020, $0ff, $0ff, $0ff, $0ec, $0ff, $0ff, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $07b, $0fe
	dc.b $0fe, $0ff, $0ff, $07b, $0ff, $0ff, $0fe, $020
	dc.b $020, $0fe, $0fe, $0fe, $0ec, $0ff, $0ff, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0fc, $020
	dc.b $0ff, $0ff, $07b, $0ff, $0ff, $0ff, $07b, $020
	dc.b $020, $0fe, $0ff, $0a0, $07b, $0ff, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $020
	dc.b $0fe, $0fe, $0fe, $0ff, $0ff, $07b, $07b, $020
	dc.b $020, $0fe, $0fe, $0ff, $0ff, $07b, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $020
	dc.b $0fe, $0fe, $0fe, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $0a0, $0fe, $0ff, $07b, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $061
	dc.b $0a0, $0ff, $0fe, $020, $0ff, $07b, $07c, $07b
	dc.b $0ff, $07b, $0ff, $0fe, $07b, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $07b, $07b, $07b, $020, $07c
	dc.b $07b, $0fe, $07b, $020, $020, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $0ff, $020, $020, $020
	dc.b $07c, $0fe, $0fe, $07b, $07b, $020, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07c, $0ff, $0ff, $020, $020, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $020, $0fe, $0fc, $020, $0fe, $07b, $06c, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $020, $0a0, $0fe, $0fe, $0a0, $0a0, $0a0, $0a0
	dc.b $020, $062, $020, $020, $020, $020, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $020, $0fe, $0fe, $0fe, $0a0, $0fe, $0a0, $0fe
	dc.b $0e1, $0a0, $0fc, $0a0, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0a0, $0a0
	dc.b $07c, $0ff, $0fe, $0fe, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $0fe, $0fe, $0a0, $061, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0ec, $061
	dc.b $0ff, $0ff, $0fe, $0ff, $0ff, $0ff, $0ff, $020
	dc.b $0fe, $0ff, $0fe, $0fe, $0a0, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $0a0, $0fe, $0fe
	dc.b $0ff, $0ff, $020, $0ff, $0ff, $0ff, $020, $0ff
	dc.b $0ff, $0ff, $0fe, $0e1, $0fe, $061, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $07f, $0fe, $0fe
	dc.b $0ff, $07b, $07b, $07b, $0ff, $020, $0ff, $020
	dc.b $0ff, $0ff, $020, $0ff, $0a0, $061, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07e, $0fe, $0fe, $0fe
	dc.b $07b, $07b, $020, $07b, $020, $07b, $020, $020
	dc.b $020, $020, $0ff, $0fe, $0ff, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $0a0, $07f, $07b, $0ff, $0ff, $0ff
	dc.b $07b, $020, $07b, $020, $020, $020, $020, $020
	dc.b $020, $0ff, $0fe, $0ff, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0fe, $0a0
	dc.b $0a0, $0a0, $061, $0ff, $0ff, $0ff, $0fe, $0fe
	dc.b $020, $07b, $020, $020, $020, $020, $020, $020
	dc.b $07b, $0ff, $0fe, $062, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0a0, $0a0
	dc.b $0ec, $061, $020, $0ff, $0ff, $0fe, $020, $0ff
	dc.b $07b, $020, $020, $020, $020, $020, $020, $07b
	dc.b $0ff, $0fe, $0a0, $0a0, $061, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0a0, $0ec
	dc.b $0ff, $07b, $0ff, $0ff, $0ff, $061, $0ff, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $0ff, $0ec, $0fe, $0ff, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $07e, $0fe
	dc.b $0fe, $07b, $07b, $0ff, $07b, $07b, $0ff, $0ff
	dc.b $020, $020, $07b, $020, $020, $020, $07b, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0fe, $0fe
	dc.b $0fe, $07b, $0ff, $07b, $07b, $07b, $0ff, $020
	dc.b $0fe, $061, $020, $020, $020, $020, $020, $07b
	dc.b $07b, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $020, $0fb
	dc.b $0ff, $07b, $062, $0ff, $0ff, $0fe, $07b, $062
	dc.b $0a0, $07e, $020, $020, $07b, $020, $020, $07b
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0a0, $020, $0ec
	dc.b $07b, $0ff, $0a0, $0a0, $0fe, $0fe, $0fe, $0fe
	dc.b $020, $020, $020, $020, $020, $020, $020, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0a0, $0ff, $020
	dc.b $062, $0a0, $0fe, $0ff, $020, $0ff, $07c, $0ff
	dc.b $020, $020, $020, $020, $020, $020, $062, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0ec, $020, $07b
	dc.b $0a0, $0fe, $0a0, $020, $0ff, $0ff, $0ff, $0ff
	dc.b $020, $020, $020, $07b, $020, $07b, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $020, $0fe, $0fe
	dc.b $0ff, $0a0, $020, $07b, $07b, $0ff, $07b, $0ff
	dc.b $020, $020, $0fe, $07b, $07b, $06c, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $020, $0fe, $0fe, $0fe
	dc.b $0ff, $06c, $0ff, $0ff, $0fe, $0ff, $07b, $020
	dc.b $020, $0fe, $0fe, $062, $07b, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0fe, $0ff
	dc.b $020, $0a0, $0ff, $07b, $07c, $0ff, $020, $020
	dc.b $062, $0a0, $0a0, $0a0, $061, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0fe, $0a0, $0a0, $0a0, $07b
	dc.b $0fe, $0fe, $0ec, $020, $020, $020, $020, $020
	dc.b $0a0, $0fe, $0fe, $0a0, $0a0, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0ff, $0fe, $0a0, $0fe, $061
	dc.b $020, $0ec, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0fe, $0fe, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0a0, $0a0, $0fe
	dc.b $020, $020, $020, $020, $020, $020, $062, $020
	dc.b $0ec, $0fe, $0ff, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $07b, $0fb, $0fe, $0fe
	dc.b $020, $020, $020, $020, $020, $0e1, $0fe, $0fc
	dc.b $0a0, $0fe, $0fe, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $0e1, $0a0, $0ff
	dc.b $0a0, $0fe, $0fe, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0e1, $0a0
	dc.b $07b, $020, $020, $020, $020, $07c, $0fe, $07b
	dc.b $0a0, $0fe, $0fe, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $07b, $0e2
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $07b
	dc.b $0fe, $0fe, $0a0, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0fe
	dc.b $0fc, $020, $020, $06c, $0a0, $0a0, $0a0, $0ff
	dc.b $0fe, $0fe, $0a0, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0a0
	dc.b $0a0, $07b, $020, $0e1, $0a0, $0fe, $0a0, $07b
	dc.b $0fe, $0a0, $0a0, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0ff, $0ff, $07b, $020, $0fe, $0a0, $0ff, $07b
	dc.b $0a0, $0fe, $0a0, $0a0, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0ff, $0ff, $07b, $0fe, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0a0, $0a0, $0a0, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $07b, $07b, $0ff, $0ff, $07b, $0ff
	dc.b $0a0, $0fe, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0fe, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $07b, $07b, $07b, $0ff, $07b, $07b
	dc.b $0fe, $0fc, $0a0, $0e2, $0fb, $0a0, $0a0, $0a0
	dc.b $0a0, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $07b, $020, $0ff, $0ff, $0fe
	dc.b $0a0, $0a0, $0a0, $0fe, $062, $0ff, $0fb, $0a0
	dc.b $0a0, $0a0, $0ec, $061, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0a0, $0fc, $07b, $020, $0ff, $0ff
	dc.b $0fe, $0ec, $0fe, $0a0, $0ff, $0fe, $0fe, $0fe
	dc.b $0a0, $0a0, $0a0, $062, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07b, $020, $020, $0ff
	dc.b $0a0, $0ec, $0ff, $0fe, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0fb, $0a0, $0fc, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0ff, $0fe, $07b, $020, $07c
	dc.b $0a0, $0a0, $07b, $0ff, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $062, $0ff, $062, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0ff, $0ff, $0fc, $020, $020
	dc.b $0a0, $0ff, $0ff, $07b, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0fe, $0ec, $0fe, $0a0, $061, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0ff, $07b, $0ff, $0fc, $020
	dc.b $07c, $0e1, $0fe, $0ff, $0fe, $0fe, $0fe, $0ff
	dc.b $07b, $0fe, $07b, $0fe, $0fe, $0a0, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $07b, $020, $0e1, $07b
	dc.b $020, $0fe, $0ff, $0fe, $0a0, $0ff, $0a0, $0fe
	dc.b $0ff, $07b, $0ec, $0fe, $0fe, $0fe, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $062, $020, $020, $07e
	dc.b $0e1, $0ec, $0ff, $0fe, $0fe, $0a0, $0ff, $0fe
	dc.b $07b, $07b, $0ff, $0fe, $0ff, $0fe, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0fe, $061, $020, $020
	dc.b $020, $0ff, $0fe, $0ff, $0fe, $0ff, $0fe, $0fe
	dc.b $0fc, $062, $0fe, $0ff, $0ff, $0fe, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0fe, $0fe, $0ff, $07b, $07b, $020
	dc.b $07b, $07b, $0fe, $0fe, $0ff, $0fe, $07c, $0fe
	dc.b $0a0, $0a0, $0a0, $0ff, $0ff, $07b, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0a0, $0ff, $0ff, $07b, $07b, $07b, $07b
	dc.b $0ff, $0fe, $0a0, $0ff, $0fe, $0ff, $07b, $0fe
	dc.b $0fe, $0fe, $0fe, $0ff, $0ff, $07b, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0ec, $07b, $0ff, $0ff, $0ff, $062
	dc.b $0ff, $0fe, $0ff, $0fe, $0ff, $07b, $07b, $0ff
	dc.b $0fe, $0a0, $0ff, $0fe, $0ff, $020, $020, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0fe, $0ff, $0fe, $0fe, $0a0, $0fe, $0ec
	dc.b $020, $0fe, $0ff, $020, $07b, $07b, $062, $0fe
	dc.b $0fe, $0fe, $0a0, $0fe, $0ec, $020, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0ff, $0ff, $0ff, $0fe, $0fe, $0fe, $07b
	dc.b $020, $07c, $020, $020, $020, $062, $020, $0e1
	dc.b $0ff, $0fe, $0fe, $0ec, $020, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0a0, $0fe
	dc.b $0fe, $0ff, $07b, $0ff, $0fe, $062, $0fe, $0a0
	dc.b $020, $020, $020, $020, $07c, $020, $07b, $0ff
	dc.b $0fe, $0fe, $0ec, $020, $020, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0fe, $0a0, $0ff
	dc.b $0ec, $0ff, $0ff, $07b, $0ff, $0fe, $0fe, $0ec
	dc.b $020, $020, $020, $020, $020, $07b, $07b, $0ff
	dc.b $0fe, $062, $020, $020, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $07c, $0ff
	dc.b $062, $0fe, $0ff, $07b, $07b, $0a0, $020, $020
	dc.b $062, $0fe, $020, $020, $07b, $020, $0fe, $0fe
	dc.b $0a0, $0ff, $020, $020, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $0ff, $0ff, $0ff
	dc.b $0fe, $0ff, $0fe, $062, $07b, $020, $0fc, $020
	dc.b $0ff, $0ff, $020, $020, $020, $07b, $0ff, $0fe
	dc.b $0fe, $0fe, $062, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0ff, $07b, $07b, $0ff
	dc.b $07b, $0ff, $0fe, $0a0, $07b, $020, $0e1, $07b
	dc.b $0ff, $020, $020, $06c, $06c, $07b, $020, $020
	dc.b $0fe, $0fe, $0ec, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $07b, $0ff, $0fe
	dc.b $0ff, $07b, $0ff, $0fe, $0fc, $020, $020, $06c
	dc.b $020, $020, $06c, $020, $0a0, $0e2, $07b, $0ff
	dc.b $0ff, $0e1, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $07b, $0ff, $07b, $0fe
	dc.b $07b, $07b, $020, $0fe, $0fe, $061, $020, $020
	dc.b $020, $07b, $07b, $0ff, $020, $07b, $0ff, $07b
	dc.b $06c, $0fe, $0a0, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $062, $0fe, $0ff, $0ff, $0ff
	dc.b $0fe, $07b, $07b, $020, $0a0, $0fe, $020, $020
	dc.b $0fe, $020, $020, $07b, $020, $07b, $020, $020
	dc.b $0ff, $0fe, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $062, $0ff, $0fe, $0e1, $0fe
	dc.b $0fe, $062, $07b, $020, $07c, $0ff, $07b, $020
	dc.b $0ec, $020, $07b, $07b, $020, $020, $07b, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0fe, $0fe, $0fe, $0fe, $0fe
	dc.b $0ec, $0fe, $0fe, $07b, $020, $020, $07b, $020
	dc.b $020, $07b, $020, $020, $020, $0ff, $07b, $0ff
	dc.b $0ff, $0fe, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0fe, $0fe, $0fe, $0ff, $0ff
	dc.b $062, $0ff, $0ff, $020, $020, $020, $020, $0ff
	dc.b $07b, $07b, $0fe, $020, $07b, $07b, $0fe, $0ff
	dc.b $0fe, $0fe, $0a0, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $0fe, $0a0, $0a0, $0a0, $0fe
	dc.b $0a0, $0a0, $020, $020, $020, $020, $020, $020
	dc.b $07b, $07b, $020, $020, $020, $0ff, $0ff, $0fe
	dc.b $0fe, $0ff, $0ec, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07c, $0fe, $0a0, $07c, $07e
	dc.b $0fb, $0fe, $07b, $020, $020, $07b, $020, $020
	dc.b $020, $020, $020, $020, $07b, $07b, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0a0, $0fe, $020, $020
	dc.b $07c, $0ff, $0fe, $07b, $0ff, $0fe, $062, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0a0, $07b, $06c
	dc.b $0a0, $0ec, $0ff, $07b, $0ff, $0fe, $0ff, $062
	dc.b $020, $020, $020, $06c, $0fe, $0fe, $0fe, $0ff
	dc.b $0ff, $0ff, $0ff, $07b, $07b, $07b, $07b, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07b, $07b, $07b, $0fe, $0fe, $061, $07c
	dc.b $0a0, $0fe, $0ff, $07b, $0ff, $0fe, $0ff, $0ff
	; LineNumber: 237
screen_buffer	dc.b	 
	org screen_buffer+1000
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $80     ;$59 used for hi-byte
initdiv16x8_dividend = $82	  ;$fc used for hi-byte
initdiv16x8_remainder = $84	  ;$fe used for hi-byte
initdiv16x8_result = $82 ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $80
mul16x8_num1 = $82
mul16x8_num2 = $84
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $80
div8x8_d = $82
div8x8_e = $84
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $80
multiplier_a = $82
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $82
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	;*
; //
; //	Output a string at the current cursor location.
; //	Set Carriage Return on/off	
; //	
; //	*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_text_colour
	;    Procedure type : User-defined procedure
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cls
	;    Procedure type : User-defined procedure
	; LineNumber: 254
txt_cls
	; LineNumber: 255
	; Assigning to register
	; Assigning register : _a
	lda #$93
	; LineNumber: 256
	jsr $ffd2
	; LineNumber: 257
	jsr txt_DefineScreen
	; LineNumber: 260
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_DefineScreen
	;    Procedure type : User-defined procedure
	; LineNumber: 266
	; LineNumber: 265
txt_y	dc.b	0
txt_DefineScreen_block4
txt_DefineScreen
	; LineNumber: 268
	; Binary clause INTEGER: NOTEQUALS
	; Load Integer array
	ldx #0 ; watch for bug, Integer array has max index of 128
	lda txt_ytab,x
	ldy txt_ytab+1,x
txt_DefineScreen_rightvarInteger_var10 = $88
	sta txt_DefineScreen_rightvarInteger_var10
	sty txt_DefineScreen_rightvarInteger_var10+1
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda txt_DefineScreen_rightvarInteger_var10+1   ; compare high bytes
	cmp #$00 ;keep
	beq txt_DefineScreen_pass111
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_pass111
	lda txt_DefineScreen_rightvarInteger_var10
	cmp #$00 ;keep
	beq txt_DefineScreen_elsedoneblock8
	jmp txt_DefineScreen_ConditionalTrueBlock6
txt_DefineScreen_ConditionalTrueBlock6: ;Main true block ;keep 
	; LineNumber: 269
	; LineNumber: 270
	rts
	; LineNumber: 271
txt_DefineScreen_elsedoneblock8
	; LineNumber: 273
	lda #$00
	ldx #$80
	sta txt_temp_address_p
	stx txt_temp_address_p+1
	; LineNumber: 280
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_y
txt_DefineScreen_forloop13
	; LineNumber: 276
	; LineNumber: 277
	; integer assignment NodeVar
	ldy txt_temp_address_p+1 ; keep
	lda txt_temp_address_p
	; Calling storevariable on generic assign expression
	pha
	lda txt_y
	asl
	tax
	pla
	sta txt_ytab,x
	tya
	sta txt_ytab+1,x
	; LineNumber: 278
	lda txt_temp_address_p
	clc
	adc #$28
	sta txt_temp_address_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc txt_DefineScreen_WordAdd21
	inc txt_temp_address_p+1
txt_DefineScreen_WordAdd21
	; LineNumber: 279
txt_DefineScreen_forloopcounter15
txt_DefineScreen_loopstart16
	; Compare is onpage
	; Test Inc dec D
	inc txt_y
	lda #$18
	cmp txt_y ;keep
	bcs txt_DefineScreen_forloop13
txt_DefineScreen_loopdone22: ;keep
txt_DefineScreen_forloopend14
txt_DefineScreen_loopend17
	; LineNumber: 280
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_move_to
	;    Procedure type : User-defined procedure
	; LineNumber: 285
	; LineNumber: 284
txt_temp_p	= $70
	; LineNumber: 282
txt__text_x	dc.b	0
	; LineNumber: 282
txt__text_y	dc.b	0
txt_move_to_block23
txt_move_to
	; LineNumber: 286
	; Load Integer array
	lda txt__text_y
	asl
	tax
	lda txt_ytab,x
	ldy txt_ytab+1,x
	sta txt_temp_p
	sty txt_temp_p+1
	; LineNumber: 286
	; Poke
	; Optimization: shift is zero
	sta $c4
	; LineNumber: 287
	
; // LSB
	; Poke
	; Optimization: shift is zero
	lda txt_temp_p+1
	sta $c5
	; LineNumber: 289
	
; // MSB
	; Poke
	; Optimization: shift is zero
	lda txt__text_x
	sta $c6
	; LineNumber: 290
	jsr $e07f
	rts
	
; // Clear keyboard buffer
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_clear_buffer
	;    Procedure type : User-defined procedure
	; LineNumber: 345
txt_clear_buffer
	; LineNumber: 346
	; Assigning to register
	; Assigning register : _x
	ldx #$0
	; LineNumber: 347
	; Poke
	; Optimization: shift is zero
	lda #$0
	sta $9e
	; LineNumber: 348
	; Poke
	; Optimization: shift is zero
	sta $26f
	; LineNumber: 349
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_wait_key
	;    Procedure type : User-defined procedure
	; LineNumber: 369
	; LineNumber: 368
txt_tmp_key_count	dc.b	$00
txt_wait_key_block25
txt_wait_key
	; LineNumber: 372
txt_wait_key_while26
txt_wait_key_loopstart30
	; Binary clause Simplified: EQUALS
	lda txt_tmp_key_count
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne txt_wait_key_elsedoneblock29
txt_wait_key_ConditionalTrueBlock27: ;Main true block ;keep 
	; LineNumber: 373
	; LineNumber: 374
	; Peek
	lda $9e + $0;keep
	; Calling storevariable on generic assign expression
	sta txt_tmp_key_count
	; LineNumber: 375
	jmp txt_wait_key_while26
txt_wait_key_elsedoneblock29
txt_wait_key_loopend31
	; LineNumber: 377
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_tmp_key_count
	; LineNumber: 378
	jsr txt_clear_buffer
	; LineNumber: 379
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 430
txt_cursor_return
	; LineNumber: 432
	; Assigning to register
	; Assigning register : _a
	lda #$d
	; LineNumber: 433
	jsr $ffd2
	; LineNumber: 435
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : txt_print_string
	;    Procedure type : User-defined procedure
	; LineNumber: 456
	; LineNumber: 455
txt_next_ch	dc.b	0
	; LineNumber: 453
txt_in_str	= $70
	; LineNumber: 453
txt_CRLF	dc.b	$01
txt_print_string_block35
txt_print_string
	; LineNumber: 458
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_next_ch
	; LineNumber: 459
txt_print_string_while36
txt_print_string_loopstart40
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock39
txt_print_string_ConditionalTrueBlock37: ;Main true block ;keep 
	; LineNumber: 459
	; LineNumber: 461
	; Assigning to register
	; Assigning register : _a
	; Load pointer array
	ldy txt_next_ch
	lda (txt_in_str),y
	; LineNumber: 462
	jsr $ffd2
	; LineNumber: 463
	; Test Inc dec D
	inc txt_next_ch
	; LineNumber: 464
	jmp txt_print_string_while36
txt_print_string_elsedoneblock39
txt_print_string_loopend41
	; LineNumber: 466
	
; //cursor_down();
	; Binary clause Simplified: NOTEQUALS
	lda txt_CRLF
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq txt_print_string_elsedoneblock47
txt_print_string_ConditionalTrueBlock45: ;Main true block ;keep 
	; LineNumber: 467
	; LineNumber: 468
	jsr txt_cursor_return
	; LineNumber: 470
txt_print_string_elsedoneblock47
	; LineNumber: 471
	rts
	;*
; //<p>Wait for the Vertical Blank to start. This is when the raster beam
; //has reached the bottom of the screen and is returning to the top left.
; 

	; NodeProcedureDecl -1
	; ***********  Defining procedure : Screen_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 19
Screen_WaitVblStart
	; LineNumber: 21
	; ****** Inline assembler section
	
waitVblStart
	lda $e840
	and #%00100000
	;cmp #%00100000
	beq waitVblStart
	
	; LineNumber: 31
	rts
	;*
; //<p>Wait for the Vertical Blank to end. This is after the raster beam
; //has returned to the top of the screen. This procedure will be true and
; //no wait while the screen is being redrawn.
; //<p>Use WaitVblEnd after a WaitVblStart when needing to ensure that the
; //vertical blank has completed before waiting for the next VBL. 
; //This is important when your game loop takes less time than the time for
; //the raster to return to the top of the screen.
; 

	; NodeProcedureDecl -1
	; ***********  Defining procedure : Screen_WaitVblEnd
	;    Procedure type : User-defined procedure
	; LineNumber: 43
Screen_WaitVblEnd
	; LineNumber: 45
	; ****** Inline assembler section
	
waitVblEnd
	lda $e840
	and #%00100000
	;cmp #%00100000
	bne waitVblEnd
	
	; LineNumber: 55
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 367
Key_Read
	; LineNumber: 369
	lda #$0
	; Calling storevariable on generic assign expression
	sta Key_keyState
	; LineNumber: 398
	
; // row to test
	; Calling storevariable on generic assign expression
	sta Key_temp
Key_Read_forloop53
	; LineNumber: 372
	; LineNumber: 374
	lda Key_temp
	; Calling storevariable on generic assign expression
	sta Key_KeyRow
	; LineNumber: 376
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 397
Key_Read_forloopcounter55
Key_Read_loopstart56
	; Compare is onpage
	; Test Inc dec D
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop53
Key_Read_loopdone60: ;keep
Key_Read_forloopend54
Key_Read_loopend57
	; LineNumber: 399
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 415
	; LineNumber: 414
Key_Pressed_block61
Key_Pressed
	; LineNumber: 417
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 425
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 241
init_screen
	; LineNumber: 242
	lda #<map
	ldx #>map
	sta map_p
	stx map_p+1
	; LineNumber: 242
	lda #$0
	ldx #0
init_screen_fill63
	sta screen_buffer,x
	inx
	cpx #$ff
	bne init_screen_fill63
	; LineNumber: 244
	; Copy full screen
	ldx #0
init_screen_fullcopyloop64
	lda screen_buffer + $0,x
	sta $8000 + $0,x
	lda screen_buffer + $100,x
	sta $8000 + $100,x
	lda screen_buffer + $200,x
	sta $8000 + $200,x
	dex
	bne init_screen_fullcopyloop64
	ldx #232
init_screen_fullcopyloop265
	lda screen_buffer + $2ff,x
	sta $8000 + $2ff,x
	dex
	bne init_screen_fullcopyloop265
	; LineNumber: 245
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 259
draw_screen
	; LineNumber: 261
	; Generic 16 bit op
	lda #<map
	ldy #>map
draw_screen_rightvarInteger_var69 = $8A
	sta draw_screen_rightvarInteger_var69
	sty draw_screen_rightvarInteger_var69+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy sy+1
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc draw_screen_rightvarInteger_var69
draw_screen_wordAdd67
	sta draw_screen_rightvarInteger_var69
	; High-bit binop
	tya
	adc draw_screen_rightvarInteger_var69+1
	tay
	lda draw_screen_rightvarInteger_var69
	sta map_p
	sty map_p+1
	; LineNumber: 262
	lda #<screen_buffer
	ldx #>screen_buffer
	sta des
	stx des+1
	; LineNumber: 265
	
; // Semi-"Unrolled" for extra speed	
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy71
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy71
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd72
	inc map_p+1
draw_screen_WordAdd72
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd73
	inc des+1
draw_screen_WordAdd73
	; LineNumber: 255
	; LineNumber: 266
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy75
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy75
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd76
	inc map_p+1
draw_screen_WordAdd76
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd77
	inc des+1
draw_screen_WordAdd77
	; LineNumber: 255
	; LineNumber: 267
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy79
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy79
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd80
	inc map_p+1
draw_screen_WordAdd80
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd81
	inc des+1
draw_screen_WordAdd81
	; LineNumber: 255
	; LineNumber: 268
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy83
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy83
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd84
	inc map_p+1
draw_screen_WordAdd84
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd85
	inc des+1
draw_screen_WordAdd85
	; LineNumber: 255
	; LineNumber: 269
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy87
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy87
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd88
	inc map_p+1
draw_screen_WordAdd88
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd89
	inc des+1
draw_screen_WordAdd89
	; LineNumber: 255
	; LineNumber: 270
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy91
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy91
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd92
	inc map_p+1
draw_screen_WordAdd92
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd93
	inc des+1
draw_screen_WordAdd93
	; LineNumber: 255
	; LineNumber: 271
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy95
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy95
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd96
	inc map_p+1
draw_screen_WordAdd96
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd97
	inc des+1
draw_screen_WordAdd97
	; LineNumber: 255
	; LineNumber: 272
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy99
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy99
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd100
	inc map_p+1
draw_screen_WordAdd100
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd101
	inc des+1
draw_screen_WordAdd101
	; LineNumber: 255
	; LineNumber: 273
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy103
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy103
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd104
	inc map_p+1
draw_screen_WordAdd104
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd105
	inc des+1
draw_screen_WordAdd105
	; LineNumber: 255
	; LineNumber: 274
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy107
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy107
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd108
	inc map_p+1
draw_screen_WordAdd108
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd109
	inc des+1
draw_screen_WordAdd109
	; LineNumber: 255
	; LineNumber: 275
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy111
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy111
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd112
	inc map_p+1
draw_screen_WordAdd112
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd113
	inc des+1
draw_screen_WordAdd113
	; LineNumber: 255
	; LineNumber: 276
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy115
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy115
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd116
	inc map_p+1
draw_screen_WordAdd116
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd117
	inc des+1
draw_screen_WordAdd117
	; LineNumber: 255
	; LineNumber: 277
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy119
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy119
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd120
	inc map_p+1
draw_screen_WordAdd120
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd121
	inc des+1
draw_screen_WordAdd121
	; LineNumber: 255
	; LineNumber: 278
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy123
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy123
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd124
	inc map_p+1
draw_screen_WordAdd124
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd125
	inc des+1
draw_screen_WordAdd125
	; LineNumber: 255
	; LineNumber: 279
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy127
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy127
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd128
	inc map_p+1
draw_screen_WordAdd128
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd129
	inc des+1
draw_screen_WordAdd129
	; LineNumber: 255
	; LineNumber: 280
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy131
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy131
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd132
	inc map_p+1
draw_screen_WordAdd132
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd133
	inc des+1
draw_screen_WordAdd133
	; LineNumber: 255
	; LineNumber: 281
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy135
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy135
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd136
	inc map_p+1
draw_screen_WordAdd136
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd137
	inc des+1
draw_screen_WordAdd137
	; LineNumber: 255
	; LineNumber: 282
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy139
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy139
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd140
	inc map_p+1
draw_screen_WordAdd140
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd141
	inc des+1
draw_screen_WordAdd141
	; LineNumber: 255
	; LineNumber: 283
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy143
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy143
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd144
	inc map_p+1
draw_screen_WordAdd144
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd145
	inc des+1
draw_screen_WordAdd145
	; LineNumber: 255
	; LineNumber: 284
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy147
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy147
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd148
	inc map_p+1
draw_screen_WordAdd148
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd149
	inc des+1
draw_screen_WordAdd149
	; LineNumber: 255
	; LineNumber: 285
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy151
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy151
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd152
	inc map_p+1
draw_screen_WordAdd152
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd153
	inc des+1
draw_screen_WordAdd153
	; LineNumber: 255
	; LineNumber: 286
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy155
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy155
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd156
	inc map_p+1
draw_screen_WordAdd156
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd157
	inc des+1
draw_screen_WordAdd157
	; LineNumber: 255
	; LineNumber: 287
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy159
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy159
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd160
	inc map_p+1
draw_screen_WordAdd160
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd161
	inc des+1
draw_screen_WordAdd161
	; LineNumber: 255
	; LineNumber: 288
	; LineNumber: 249
	; LineNumber: 252
	; memcpyfast
	ldy #39
draw_screen_memcpy163
	lda (map_p),y
	sta (des),y
	dey
	bpl draw_screen_memcpy163
	; LineNumber: 253
	lda map_p
	clc
	adc #$28
	sta map_p+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd164
	inc map_p+1
draw_screen_WordAdd164
	; LineNumber: 254
	lda des
	clc
	adc #$28
	sta des+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_screen_WordAdd165
	inc des+1
draw_screen_WordAdd165
	; LineNumber: 255
	; LineNumber: 291
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_ship
	;    Procedure type : User-defined procedure
	; LineNumber: 297
draw_ship
	; LineNumber: 300
	; Generic 16 bit op
	ldy #0
	lda x
draw_ship_rightvarInteger_var169 = $8A
	sta draw_ship_rightvarInteger_var169
	sty draw_ship_rightvarInteger_var169+1
	; Generic 16 bit op
	lda #<screen_buffer
	ldy #>screen_buffer
draw_ship_rightvarInteger_var172 = $8C
	sta draw_ship_rightvarInteger_var172
	sty draw_ship_rightvarInteger_var172+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc draw_ship_rightvarInteger_var172
draw_ship_wordAdd170
	sta draw_ship_rightvarInteger_var172
	; High-bit binop
	tya
	adc draw_ship_rightvarInteger_var172+1
	tay
	lda draw_ship_rightvarInteger_var172
	; Low bit binop:
	clc
	adc draw_ship_rightvarInteger_var169
draw_ship_wordAdd167
	sta draw_ship_rightvarInteger_var169
	; High-bit binop
	tya
	adc draw_ship_rightvarInteger_var169+1
	tay
	lda draw_ship_rightvarInteger_var169
	sta sdes
	sty sdes+1
	; LineNumber: 300
	; memcpy
	ldy #0
draw_ship_memcpy173
	lda ship+ $01,y
	sta (sdes),y
	iny
	cpy #$4
	bne draw_ship_memcpy173
	; LineNumber: 302
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd174
	inc sdes+1
draw_ship_WordAdd174
	; LineNumber: 303
	; memcpy
	ldy #0
draw_ship_memcpy175
	lda ship+ $06,y
	sta (sdes),y
	iny
	cpy #$4
	bne draw_ship_memcpy175
	; LineNumber: 304
	lda sdes
	clc
	adc #$28
	sta sdes+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc draw_ship_WordAdd176
	inc sdes+1
draw_ship_WordAdd176
	; LineNumber: 304
	; memcpy
	ldy #0
draw_ship_memcpy177
	lda ship+ $0b,y
	sta (sdes),y
	iny
	cpy #$4
	bne draw_ship_memcpy177
	; LineNumber: 308
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : draw_frame
	;    Procedure type : User-defined procedure
	; LineNumber: 310
draw_frame
	; LineNumber: 320
	
; //	incrange(ticks,0,100);
; // This will run approx 60hz so we need to figure out vertical blank
; // Bit 5 is high when vertical retrace in effect
; //		if mod(ticks,5)=0 then begin 
; //incrange(sx,0,400);
	lda sy
	sec
	sbc #$01
	sta sy+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcs draw_frame_WordAdd179
	dec sy+1
draw_frame_WordAdd179
	; LineNumber: 321
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda sy+1   ; compare high bytes
	cmp #$00 ;keep
	bne draw_frame_elsedoneblock183
	lda sy
	cmp #$00 ;keep
	bne draw_frame_elsedoneblock183
	jmp draw_frame_ConditionalTrueBlock181
draw_frame_ConditionalTrueBlock181: ;Main true block ;keep 
	; LineNumber: 320
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$b0
	; Calling storevariable on generic assign expression
	sta sy
	sty sy+1
draw_frame_elsedoneblock183
	; LineNumber: 323
	jsr draw_screen
	; LineNumber: 324
	jsr draw_ship
	; LineNumber: 324
	; Copy full screen
	ldx #0
draw_frame_fullcopyloop186
	lda screen_buffer + $0,x
	sta $8000 + $0,x
	lda screen_buffer + $100,x
	sta $8000 + $100,x
	lda screen_buffer + $200,x
	sta $8000 + $200,x
	dex
	bne draw_frame_fullcopyloop186
	ldx #232
draw_frame_fullcopyloop2187
	lda screen_buffer + $2ff,x
	sta $8000 + $2ff,x
	dex
	bne draw_frame_fullcopyloop2187
	; LineNumber: 329
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : start_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 350
start_screen
	; LineNumber: 352
	jsr txt_cls
	; LineNumber: 353
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 354
	; Assigning a string : txt_in_str
	lda #<start_screen_stringassignstr189
	sta txt_in_str
	lda #>start_screen_stringassignstr189
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 356
	jsr txt_clear_buffer
	; LineNumber: 357
	jsr txt_wait_key
	; LineNumber: 359
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : end_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 362
end_screen
	; LineNumber: 364
	; Binary clause Simplified: NOTEQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq end_screen_elseblock194
end_screen_ConditionalTrueBlock193: ;Main true block ;keep 
	; LineNumber: 365
	; LineNumber: 367
	jsr txt_cls
	; LineNumber: 368
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 369
	; Assigning a string : txt_in_str
	lda #<end_screen_stringassignstr203
	sta txt_in_str
	lda #>end_screen_stringassignstr203
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 372
	jmp end_screen_elsedoneblock195
end_screen_elseblock194
	; LineNumber: 373
	; LineNumber: 375
	jsr txt_cls
	; LineNumber: 376
	lda #$a
	; Calling storevariable on generic assign expression
	sta txt__text_x
	; Calling storevariable on generic assign expression
	sta txt__text_y
	jsr txt_move_to
	; LineNumber: 377
	; Assigning a string : txt_in_str
	lda #<end_screen_stringassignstr206
	sta txt_in_str
	lda #>end_screen_stringassignstr206
	sta txt_in_str+1
	lda #$0
	; Calling storevariable on generic assign expression
	sta txt_CRLF
	jsr txt_print_string
	; LineNumber: 380
end_screen_elsedoneblock195
	; LineNumber: 382
	jsr txt_clear_buffer
	; LineNumber: 383
	jsr txt_wait_key
	; LineNumber: 385
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_game
	;    Procedure type : User-defined procedure
	; LineNumber: 388
init_game
	; LineNumber: 390
	jsr init_screen
	; LineNumber: 391
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta sx
	sty sx+1
	; LineNumber: 392
	lda #$b0
	; Calling storevariable on generic assign expression
	sta sy
	sty sy+1
	; LineNumber: 393
	lda #$a
	; Calling storevariable on generic assign expression
	sta x
	; LineNumber: 394
	; Calling storevariable on generic assign expression
	sta y
	; LineNumber: 400
	
; // The screen updates but no keyboard so disable
; //setup_irq();
	lda #$1
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 401
	lda #$0
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 405
	
; // Numeric Keypad
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable on generic assign expression
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 406
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 407
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 408
	; Integer constant assigning
	ldy #$80
	; Calling storevariable on generic assign expression
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 411
	
; // Regular keys        
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable on generic assign expression
	sta key_up
	sty key_up+1
	; LineNumber: 412
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta key_down
	sty key_down+1
	; LineNumber: 413
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta key_left
	sty key_left+1
	; LineNumber: 414
	; Integer constant assigning
	ldy #$02
	; Calling storevariable on generic assign expression
	sta key_right
	sty key_right+1
	; LineNumber: 416
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : main_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 419
main_loop
	; LineNumber: 424
	
; // Andy's keyboard routine
; // doesn't work with IRQ :(
	jsr Key_Read
	; LineNumber: 427
	lda x
	; Calling storevariable on generic assign expression
	sta old_x
	; LineNumber: 428
	lda y
	; Calling storevariable on generic assign expression
	sta old_y
	; LineNumber: 429
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed221
	jmp main_loop_ConditionalTrueBlock211
main_loop_localfailed221: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock213
main_loop_ConditionalTrueBlock211: ;Main true block ;keep 
	; LineNumber: 430
	; LineNumber: 431
	; Binary clause Simplified: GREATEREQUAL
	lda y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc main_loop_elsedoneblock226
main_loop_ConditionalTrueBlock224: ;Main true block ;keep 
	; LineNumber: 432
	; LineNumber: 433
	; Test Inc dec D
	dec y
	; LineNumber: 434
main_loop_elsedoneblock226
	; LineNumber: 435
main_loop_elsedoneblock213
	; LineNumber: 437
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed240
	jmp main_loop_ConditionalTrueBlock230
main_loop_localfailed240: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock232
main_loop_ConditionalTrueBlock230: ;Main true block ;keep 
	; LineNumber: 438
	; LineNumber: 439
	; Binary clause Simplified: LESS
	lda x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs main_loop_elsedoneblock245
main_loop_ConditionalTrueBlock243: ;Main true block ;keep 
	; LineNumber: 440
	; LineNumber: 441
	; Test Inc dec D
	inc x
	; LineNumber: 442
main_loop_elsedoneblock245
	; LineNumber: 443
main_loop_elsedoneblock232
	; LineNumber: 445
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed259
	jmp main_loop_ConditionalTrueBlock249
main_loop_localfailed259: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock251
main_loop_ConditionalTrueBlock249: ;Main true block ;keep 
	; LineNumber: 446
	; LineNumber: 447
	; Binary clause Simplified: LESS
	lda y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs main_loop_elsedoneblock264
main_loop_ConditionalTrueBlock262: ;Main true block ;keep 
	; LineNumber: 448
	; LineNumber: 449
	; Test Inc dec D
	inc y
	; LineNumber: 450
main_loop_elsedoneblock264
	; LineNumber: 451
main_loop_elsedoneblock251
	; LineNumber: 452
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_localfailed278
	jmp main_loop_ConditionalTrueBlock268
main_loop_localfailed278: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq main_loop_elsedoneblock270
main_loop_ConditionalTrueBlock268: ;Main true block ;keep 
	; LineNumber: 453
	; LineNumber: 454
	; Binary clause Simplified: GREATEREQUAL
	lda x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc main_loop_elsedoneblock283
main_loop_ConditionalTrueBlock281: ;Main true block ;keep 
	; LineNumber: 455
	; LineNumber: 456
	; Test Inc dec D
	dec x
	; LineNumber: 457
main_loop_elsedoneblock283
	; LineNumber: 458
main_loop_elsedoneblock270
	; LineNumber: 462
	
; // until the IRQ works will need to update screen here
	jsr Screen_WaitVblStart
	; LineNumber: 463
	jsr draw_frame
	; LineNumber: 464
	jsr Screen_WaitVblEnd
	; LineNumber: 465
	rts
block1
	; LineNumber: 470
MainProgram_while286
MainProgram_loopstart290
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock289
MainProgram_ConditionalTrueBlock287: ;Main true block ;keep 
	; LineNumber: 470
	; LineNumber: 472
	; main program 
	jsr init_game
	; LineNumber: 473
	jsr start_screen
	; LineNumber: 475
MainProgram_while303
MainProgram_loopstart307
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock306
MainProgram_localsuccess310: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne MainProgram_elsedoneblock306
MainProgram_ConditionalTrueBlock304: ;Main true block ;keep 
	; LineNumber: 476
	; LineNumber: 479
	
; // where the magic happens	
	jsr main_loop
	; LineNumber: 481
	jmp MainProgram_while303
MainProgram_elsedoneblock306
MainProgram_loopend308
	; LineNumber: 483
	jsr end_screen
	; LineNumber: 485
	jmp MainProgram_while286
MainProgram_elsedoneblock289
MainProgram_loopend291
	; LineNumber: 486
	; End of program
	; Ending memory block
EndBlock410
start_screen_stringassignstr189		dc.b	"PET-TYPE 2021"
	dc.b	0
end_screen_stringassignstr197		dc.b	"YOU WIN!"
	dc.b	0
end_screen_stringassignstr200		dc.b	"YOU LOSE!"
	dc.b	0
end_screen_stringassignstr203		dc.b	"YOU WIN!"
	dc.b	0
end_screen_stringassignstr206		dc.b	"YOU LOSE!"
	dc.b	0
